{"scores":{"Spring '14":{"course_score":{"overall":"3.40","workload":"3.70","difficulty":"3.60","recommendation":"3.70","enrollment":"259","response rate":"72.59","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"instructor_scores":[{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2013","term":"2","id":"bbd35eb5b58b0cd137d9f651621fc522","first":" Jesse","last":"Tov","InstructorOverall":"3.10","EffectiveLecturesorPresentations":"3.00","AccessibleOutsideClass":"3.30","GeneratesEnthusiasm":"2.90","FacilitatesDiscussionEncouragesParticipation":"3.10","GivesUsefulFeedback":"2.90","ReturnsAssignmentsinTimelyFashion":"2.40"},{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2013","term":"2","id":"f53a190322d756affba4b113b9b2bb5b","first":" Henry H.","last":"Leitner","InstructorOverall":"2.90","EffectiveLecturesorPresentations":"2.90","AccessibleOutsideClass":"2.80","GeneratesEnthusiasm":"3.20","FacilitatesDiscussionEncouragesParticipation":"3.20","GivesUsefulFeedback":"2.60","ReturnsAssignmentsinTimelyFashion":"2.50"}]},"Spring '13":{"course_score":{"overall":"3.93","workload":"3.94","difficulty":"3.77","recommendation":"4.03","enrollment":"215","response rate":"90.23","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"instructor_scores":[{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2012","term":"2","id":"0d385eae518092ada5b41e8c64bb0f13","first":" Greg","last":"Morrisett","InstructorOverall":"3.91","EffectiveLecturesorPresentations":"4.06","AccessibleOutsideClass":"3.55","GeneratesEnthusiasm":"3.98","FacilitatesDiscussionEncouragesParticipation":"3.65","GivesUsefulFeedback":"3.24","ReturnsAssignmentsinTimelyFashion":"2.95"}]},"Spring '12":{"course_score":{"overall":"4.16","workload":"3.78","difficulty":"3.63","recommendation":"4.22","enrollment":"189","response rate":"87.30","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"instructor_scores":[{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2011","term":"2","id":"0d385eae518092ada5b41e8c64bb0f13","first":"John Gregory","last":"Morrisett","InstructorOverall":"4.37","EffectiveLecturesorPresentations":"4.41","AccessibleOutsideClass":"4.12","GeneratesEnthusiasm":"4.45","FacilitatesDiscussionEncouragesParticipation":"4.18","GivesUsefulFeedback":"4.19","ReturnsAssignmentsinTimelyFashion":"4.09"}]},"Spring '11":{"course_score":{"overall":"3.95","workload":"3.32","difficulty":"3.48","recommendation":"4.00","enrollment":"165","response rate":"90.91","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"instructor_scores":[{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2010","term":"2","id":"0d385eae518092ada5b41e8c64bb0f13","first":"John Gregory","last":"Morrisett","InstructorOverall":"4.25","EffectiveLecturesorPresentations":"4.30","AccessibleOutsideClass":"3.85","GeneratesEnthusiasm":"4.34","FacilitatesDiscussionEncouragesParticipation":"4.08","GivesUsefulFeedback":"3.60","ReturnsAssignmentsinTimelyFashion":"3.54"}]},"Spring '10":{"course_score":{"overall":"3.97","workload":"3.33","difficulty":"3.55","recommendation":"4.00","enrollment":"98","response rate":"92.86","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"instructor_scores":[{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2009","term":"2","id":"0d385eae518092ada5b41e8c64bb0f13","first":"John Gregory","last":"Morrisett","InstructorOverall":"4.20","EffectiveLecturesorPresentations":"4.19","AccessibleOutsideClass":"3.70","GeneratesEnthusiasm":"4.33","FacilitatesDiscussionEncouragesParticipation":"4.04","GivesUsefulFeedback":"2.84","ReturnsAssignmentsinTimelyFashion":"2.40"}]},"Spring '09":{"course_score":{"overall":"3.33","workload":"3.87","difficulty":"3.45","recommendation":"3.47","enrollment":"95","response rate":"97.89","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"instructor_scores":[{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2008","term":"2","id":"0d385eae518092ada5b41e8c64bb0f13","first":"John Gregory","last":"Morrisett","InstructorOverall":"4.18","EffectiveLecturesorPresentations":"4.27","AccessibleOutsideClass":"3.67","GeneratesEnthusiasm":"4.15","FacilitatesDiscussionEncouragesParticipation":"4.02","GivesUsefulFeedback":"2.79","ReturnsAssignmentsinTimelyFashion":"2.56"}]},"Spring '08":{"course_score":{"overall":"3.16","workload":"3.67","difficulty":"3.53","recommendation":"3.30","enrollment":"136","response rate":"67.65","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"instructor_scores":[{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2007","term":"2","id":"5a48e4e06e3dece44781a13510b69216","first":"Radhika","last":"Nagpal","InstructorOverall":"3.23","EffectiveLecturesorPresentations":"3.17","AccessibleOutsideClass":"3.33","GeneratesEnthusiasm":"3.17","FacilitatesDiscussionEncouragesParticipation":"3.81","GivesUsefulFeedback":"3.33","ReturnsAssignmentsinTimelyFashion":"3.50"}]},"Spring '07":{"course_score":{"overall":"3.83","workload":"3.76","difficulty":"3.53","recommendation":"4.07","enrollment":"67","response rate":"70.15","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"instructor_scores":[{"number":"COMPSCI 51","cat_num":"3411","course_id":"1225","year":"2006","term":"2","id":"5a48e4e06e3dece44781a13510b69216","first":"Radhika","last":"Nagpal","InstructorOverall":"3.96","EffectiveLecturesorPresentations":"3.84","AccessibleOutsideClass":"3.79","GeneratesEnthusiasm":"4.07","FacilitatesDiscussionEncouragesParticipation":"4.31","GivesUsefulFeedback":"4.33","ReturnsAssignmentsinTimelyFashion":"4.00"}]}},"comments":{"Spring '08":{"comments":["Content good but lectures not so relevant. Ended up doing most learnign on problem sets.","I'd say don't take this course unless you plan to concentrate in CS. Be prepared to work! Don't skip any readings. Review after each lecture and ask questions to keep up.","a necessity if you are a computer science concentrator. for those seeking a secondary or just wanting to learn more computer science after CS50, take CS61 instead.","It's a lot of work, but you learn more about what programming is actually like.","It is not quite as fun as CS 50, but makes you think harder and in cool ways.","if ( you.have == \"creativity\")\r\n     you.will_like_this_class();\r\nif ( you.like == \"candy\")\r\n     you.will_like_this_class();","Be willing to work hard","Interesting and useful (I am certainly a much better programmer after taking this class). Requires a lot of time spent debugging (which should not be a part of the course) and can be frustrating in terms of evaluations.","Take this course if you are willing to work a lot!","Be careful on the midterms.","I only took this course because it was required, and you should only ever take it if you're required to as well.","It would be much better to take 6.001 or 6.170 at MIT instead, if they were still offered. Instead, Harvard students are left with an inferior substitute.","Don't take this class - CS50 is a great course, and CS51 is nowhere near as good.","The material is valuable to learn and know, but the class itself isn't anything special.  Lectures are bland, TF's are distant, and the problem sets can get very tough.  Pair programming with assigned partners can be frustrating if you're stuck with someone incompetent.","Good course that introduces you to the basics of object oriented programming and larger ideas of abstraction.","CS51 is a course with a lot of cool concepts, Scheme especially, and a number of very cool problem sets. It's also a course in which you're expected to learn and produce a lot within a small time frame. It's a great further introduction to computer programming, but lacks substantial support for newcomers, something that might encourage more people to do more CS.","I would tell future students that unless you want to be a cs major, you will not be very interested in cs51. I could have taken CS or physics for my concentration, and I regret not taking physics.","Only take this course if you are concentrating in CS and must take it.","Good class, make sure you're interested in and capable with the material though.","Challenging but worth it if you really like computer science and plan on working on large projects in the future.","Unless you're a programming wiz, expect to spend many hours in the science center terminal room.","I recommend this course ONLY IF you are a CS Concentrator or are pursuing a Secondary Field in CS.  Should not be taken as an elective.  Be prepared to do a LOT of work.  For partner assignments, definitely switch if you are not happy, switching helped me tremendously.  Sections are more useful than lectures surprisingly.","It's not as easy as it sounds.","There is nothing in this course that isn't just as well learned through Google and a bit of plodding. Find a good project to work on and skip this one.","You will spend half the semester learning a language that no one uses (Scheme), and the other half rushing trying to learn C++ so that you can write very challenging code in it by the end of the semester.","It's not an exciting course. But you have no choice.","Arguably the simplest chance to learn certain 'must know' programming concepts such as abstraction, and OOP.","If you like computer science, this is probably a good class to take.","It's required for CS concentrators. If you're planning on working with me in other programming classes, you'd better have understood what this class requires.","only if you're willing to work.","The problem sets can be lengthy (comparable to CS 50 if you entered the course with limited experience) but quite doable, and are very satisfying when completed.","I would say that this class is a very fun introduction to higher level programming and that there will be lots of assignments with very tangible results.  I would say that one might potentially find it to be a high workload class, but it depends greatly on one's aptitude and it is impossible to tell how time consuming the class will be on first appearances.","Challenging, but you learn a lot","Don't bother taking it if you thought CS50 was painful and moderately interesting, because its definitely not as fun.","I would recommmend it only for concentrators in computer science and those interested in learning C++","You'll learn a lot about abstraction and design in programming, which were very interesting to me and made me feel more like a programmer; you'll also get good coding practice from the problem sets.","Recommend for anyone interested in programming. Scheme is one of the most incredible things you can learn here.","Although this is a great course for furthering one's computer science knowledge, I found it overwhelming at times to keep up with the problem sets and all of the material.  Be prepared to dedicate a lot of time to this class.","I thought it was a very difficult class, lectures weren't particularly helpful, but learning C++ is useful, and some of the problem sets are fun to do (if you're not using up your entire week on them).","It's a good course, but not as good as CS 50.","If you like challenging problem sets and want to learn to program, it's great.  Don't expect to enjoy lectures though.","the problem sets are unattractive and long, lectures are not very useful, however after taking this course you will know scheme and C++ as well as how  to come up with abstract structures","if you were in the bottom quarter of cs50, don't take this: there is less extra help available, less time to fall behind.","Raytracer!","While the course does teach many interestind and useful things, the percentage of time spend on interesting things is too low to make the course worthwhile (unless you need it for a concentration requirement).","There are a lot of interesting things in this course, not all of which you will enjoy but ultimately will be enriched for the better by.","If you are a CS concentrator, take another, more interesting and more challenging class (such as CS 61) while you take CS 51.","ONLY take it if it's required and you have never worked with functional and object-oriented programming before; otherwise, it will be a waste of time and an exercise in tedium.","If it is part of your requirements for your major, live through it with a friend, otherwise don't go anywhere near it","Read the bulletin board. Post to the bulletin board. Worship the bulletin board.","Only take this class if you have to.","be ready to work a lot.  Also it is helpful to have a lot of background with computer science","Take the class because you learn C++ and design, but the class wasn't particularly enjoyable because I spent a lot of time feeling very frustrated by poor explanations.","Students need to be ready to get answers to their own questions by trying things and by looking online. Otherwise you will become very frustrated quickly.","take cs61 instead, this course is boring, the teaching staff is boring, and the course material learned is often intuitive and not very useful, only take if you are a compsci major and must fulfill requirements","I would recommend this class on the strength of the Scheme portion and its wide relevance.","It will use quite a bit of time!"]},"Spring '09":{"comments":["CS 51 is a great introduction to *good* programming - a much harder task than most think. The class also presents future topics and can show a student whether s\/he would be interested in continuing in computer science.","This class is likely to get MUCH better next year and I really wish I'd waited to take it. So, take it!! Greg M is amazing.","It doesn't teach what it is supposed to and it is the most poorly run and disorganized course I have ever taken. How this could happen at the best University in the world is absolutely beyond me.","This is a really well-taught class and you'll really learn to appreciate computer science, as distinct from plain-old programming","Do not take this class unless you must. Much of the material overlaps with CS 124, and you can learn Scheme on your own. Professor Zabih in particular is incompetent and unenlightening, rendering about half of the lectures completely meaningless.","If they reduce emphasis on Scheme and functional programming, go for it.","Essential for students interested in possibly pursuing Computer Science, but limited appeal outside of that.","To be prepared to spend a lot of time working for the class, and that the class will be a lot more organized in future semesters, so it will be better and more enjoyable.","It took a lot of work and the projects were often confusing and sometimes full of bugs","if the work is toned down and you realyl want to do tough CS","This is a very challenging class, but it will teach you to think in really interesting ways.","There are two problem sets per week, so be prepared to work.  But you will learn a lot about how to write elegant and useful code.","they worked out a ton of bugs last year so I'd assume it will be better next year.","If you ignore the organization and feedback issues and the excessive workload, then you have a very interesting course.","Hopefully it'll be a huge improvement from this year.","Even though I already had a fair amount of CS experience, this class introduces a ton of material that I had never seen before. It was quite a bit of work, but it was always fun and\/or rewarding.","great and funny lectures, good breadth and depth of material, really useful in practice, not only to computer scientists. I'm an enineering concentrator and taking cs51 helped me save A LOT of time on some engineering assignments, esp. with data processing.","They have to have the time to devote to the class, but if they do it will be worthwhile and interesting to learn a new way of thinking about problems.","Unless you are not taking any classes, this class is just not worth it..","lambda is your friend, and remember to close all of your parens.","This course, while not as practical as CS50, offers a very good introduction to the more theoretical aspects of computer science. In my opinion, taking CS51 is the best test of whether computer science is right for you. I recommend it to anyone interested in the theory of the discipline.","DON'T TAKE IT!!! THIS COURSE WAS THE MOST DISORGANIZED COURSE I HAVE EVER SEEN AND I ONCE HAD A TEACHER WITH ALZHEIMER'S!!!","Good intentioned, but a mess.","take it if you have good amount of time in your schedule","extremely interesting if you want to learn more cs, but incredibly time consuming","It was so badly organized. Don't even think of taking it unless it is required for your concentration.","the course is hard and very time-consuming, and requires great dedication, but at the same time it is very rewarding. And the professors are lots of fun!","Do not take unless you're a CS concentrator; it has no practical use to anyone else.  Also, be prepared to deal with an annoying\/almost useless language.","I would tell them that this course is well taught, and very useful for learning about higher-order functions, functional programming, etc.","CS50 teaches you how to program, and both CS121 and CS124 teach you theory. CS51 is an awkward middle-zone that does neither very well.","If the teaching 100% in Scheme thing is changed, I might actually recommend the class. Otherwise, no dice.","Take this class. It's good. Trust me.","The material is fun and worthwhile, but the course staff didn't put in that much effort.  If you'd find sloppily-written assignments, buggy exam questions, and psets returned several months late frustrating, make sure the course staff are committed to putting for effort into the course than then did my year.","The material was interesting but the way it was run was extremely disappointing.","This is a great course for anyone with an interest in computer science.","The class is a whole lot of work, but it's a prerequisite for a lot of CS classes, so it's kind of necessary.","Learn Scheme -- it's cool.  Course was pretty good this year -- it's bound to get better from feedback.  Workload is pretty manageable, and even this should get better as the staff learns to optimize for maximum pedagogical effect per hour spent on the course.\r\n\r\nThe only problem would be if you don't like learning in a lecture format.  If so, you're kind of stuck because there is no real textbook for the course.  It's either understanding the lectures, reading the lecture notes, or going to section\/office hours.","Not so bad of a required class for CS; otherwise, only take it if you are really passionate about CS but not about a specific topic in it.","DO NOT TAKE THIS CLASS. DO NOT TAKE THIS CLASS. DO NOT UNDER ANY CIRCUMSTANCES TAKE THIS CLASS. Unless you want an impossible final where the mean was a D+ (69.36), problem sets that have tons of bugs, clueless TF's who not only don't know what's going on but fail to hand problem sets back until EXAM PERIOD, absolutely useless material that you will not use ever again unless you take CS 152 or 153, and a GPA deflator, then stay away! This class is NOT CS50 part II. I don't care how much you loved Malan and CS50 (as I did); you have been warned!","in future years, cs51 will probably be more organized and better run.","Unexpected amount of work. Not that well taught\/explained. But definitely good skill to have.","Greg Morrisett is an excellent professor and this course is great for anyone who is interested in computer science. It isn't as exciting as CS 50 but is still a great course. It might still be considered too \"basic\" by those with lots of early CS experience but it's great for the rest of us.","Only take this course if it is better organized next year.","take it only if you are sure you lie computer science","The revamped version of CS51 is great and surprisingly sophisticated in terms of some of the algorithms it teaches. It is a very engaging course and I highly recommend it.","Great information, taught poorly. It's a tradeoff.","While CS50 is about programming, CS51 is about computer science.  Take the class if you'd like to learn a new way of thinking about problems and code.","It is pretty unorganized and the work load is just tremendous.","Hard to say, it's still good to program I guess. But the course itself was a giant giant mess.","CS51 teaches you to think more clearly about program design.  The partner projects aren't as painful as they might sound, but do be aware that it's like having two problem sets a week, since there's usually a project checkpoint due within a few days of a pset.","Take it!","The course could be very interesting and rewarding, but only if improvements are made to course administration and to the depth of material coverage.","do not take the course unless you are prepared for a very high workload; do not treat 51 as if it were cs 50; the support structure is not the same.","Greg is a great professor and though the language seems useless at first, it's actually very cool. Two assignments per week can wear you down...","this course teaches not only things that are useuful right now but also things that will be very useful in future. This course has a vision!","Assuming you're into computer science, this class is an excellent asset to your knowledge. You may not like or understand the implications of functional programming or the importance\/application of recursion now, but you will understand and wield its power with the fury of a thousand dragons after taking this course. Also, Greg Morisett rocks.","Sigh. So I'd actually be \"likely to recommend\" this course if not for the way all the concrete aspects (ie the awful projects, the needlessly grueling 2-psets-a-week schedule, the general disorganization) were handled, because the course material is interesting and cool and definitely stuff I'm glad knowing, and the professors and TF's were wonderful teachers in that regard. But all the concrete little details were handled so poorly that I really have trouble recommending this course."]},"Spring '10":{"comments":["You come out with a new view on programming and a new toolbox to tackle problems with.  The class is run moderately well, and they've changed the language to OCaml and Java, so it seems to constantly begetting better.  Either way, it's required for the concentration and very useful if you want to program\/solve problems.  It goes much deeper into the actual science of programming than CS50 and stresses elegance more than functionality.  I definitely think this class is worth it.","Make sure you are sort of familiar with Java syntax.  They don't really explain that that well in the course, because they want to get beyond syntax and focus on the ideas of Java.","This class is a far cry from what it used to be like in years past (at least I think so, based on what I've heard). It's much better organized and will hopefully get even better in the future. A lot of the fun\/show-like aspects of CS50 are done away with in this course, but the material becomes even deeper and more interesting. If you aren't that interested in CS, you may not like it. Otherwise, you'll enjoy the deeper knowledge you gain of design and development.","This is a fantastic course because not only does it introduce you to functional programming (which is awesome), but it actually gives you a feel for what programming in the real world is like.  As long as you know basic basic programming (i.e. what an \"if\" statement is, or if you've ever used R or Matlab), I would recommend skipping CS 50 and jumping straight to this one.  This was the first CS course I've taken in my life, and I was able to keep up just fine.  Moreover, I probably learned more in this class than any at Harvard.","Lectures can be very hard to get through.  It's probably more productive for you to read through the slides on your own.  Don't really recommend wasting your time learning OCaml either, but the Java is worth it.","Morrisett is awesome.","This class will certainly make you think in new ways, but some of the syntax and concepts will be a little hard to adapt to.","If this class was taught like it was this year, you can safely ignore earlier CUE scores. The transition from CS50 to 'real' computer science has never been as seamless.","Be ready to work hard.  Ocaml is really strange at first but gets easier after a few weeks.  Lectures are important, but office hours are way more important and helpful.  If you start the problem sets early you should be fine.  Be aware if there is a final and a final project--this could make studying for the final incredibly difficult.","it's hard but fun","I liked the class, but it really was useless. They made it a lot better than it was before, so I recommend it as a requirement, but NOT as an elective.","Be ready for the expectations from CS50 to rise dramatically.  The class as a whole is significantly harder, but it is worth the effort.  Don't be shocked, however, if they start falling behind on getting problem sets back to you.  Also, don't be overwhelmed when on the first day of lecture you are blown away by some bizarre syntax (if you happen to be doing ocaml like this year, don't be as blown away as I was by \"let x =\" statements and the \"interactive\" style of the ocaml toplevel - it isn't nearly as impenetrable as it seems at first).","clear your schedule","This will change you from a computer programmer to a computer scientist. Necessary to learn how to properly design software and elegant code. Functional programming is incredibly cool and will change the way you approach solving problems.","Tougher and less flashy than CS50, but definitely a very solid introductory CS course.","cs51 begins to venture into what feels like real cs. unlike cs50, it is not for everyone. however, you will exit feeling like you have a better appreciation for programming.","Challenging and interesting.  If you're seriously interested in computer science, this class is worth the time.","It's a hard class, but if you keep up with the work it will be fine.","This class shows you what majoring in CS is like. Ocaml is great, the first project is not pleasant and Greg's sarcasm makes the class.","The project component of the class is very annoying.","As is always the case with CS, start the P-sets early and you'll be fine. The course is well-taught, not too stressful; the problem sets are great at teaching you how easy\/fun it is to think elegantly.","The course requires consistent effort.  The final exam is deadly.","TAKE THIS IF YOU REALLY WANT TO PROGRAM!  This course is hard but well worth the pay off.  Cs50 is not enough to make you a good programmer.","How much you get out of this course depends entirely on how much effort you put into it to really learn and understand and put into practice the design principles preached. Also, do as much of the section problems as you can (I wish I had done more to prepare for the final)","This is the new and improved CS51. Each year, they revamp this class to try to make it better... and each year they fail. But not any more. Greg has finally got it right and this class is excellent. You will see computer science with a much greater degree of appreciation after this class. Very much recommended.","Great class to take your Computer Science knowledge and skills up a major level.  Be prepared for a few 20+ hour work weeks during the semester.","It's a lot of work, but you learn useful things, so stick with it.","This class is interesting and generally not a lot of work.  I'm very happy with my decision to take it (as opposed to my decision to take CS 50 last semester, which I very much regret).  The only note of warning is that despite very short problem sets and easy exams, the projects take up a very large amount of time.","Seems like its much improved from past years. Not as intense as CS50 but the material is more challenging","it's a good class and greg is an awesome lecturer, but be prepared for a lot of abstract examples that can be difficult to grasp.","It's a good class for students not used to working with larger projects requiring higher levels of abstraction","Greg Morrisett is a brilliant individual and a captivating lecturer.","It's definitely not CS50, but it is no way a lesser course. It was a lot of fun and Greg is a fantastic lecturer. He really knows what he's talking about and then some. Though assignments are a lot more daunting and OCaml requires a different level of thinking that you didn't get in CS50, it's definitely great for those that want to know more about abstractions and functionality.","Hard!","Take this class as long as you have time to devote to it.","You definitely learn a lot. A great course. I think Greg is taking his sabbatical next year though, so it might be restructured again. Hopefully the one teaching it next year doesn't change very much.","This is a very solid course. The teaching staff is very good and the material is relatively fun. It doesn't have the CS50 atmosphere but it's still fun while getting you into real CS. You learn useful languages and crucial coding skills.","Don't slack off and use the TFs as much as possible.","Material was interesting, and Prof. Morrisett is a fantastic teacher. The problem sets were actually fun- not too hard but would get you thinking. This invitation to actually use our brains- what a welcome respite from the rest of Harvard! The best class in my 3 years here. Recommended for anyone.","This is a difficult course, but probably necessary to be properly prepared to continue in CS.","This class is very unorganized, and not as fun as previously imagined. Also I would have preferred having problem sets to learn the material instead of a final project.","Provided that the final project requirement gets revamped somehow, this class would be absolutely awesome to take.","A lot of fun but make sure you have the time to devote to it.","Very interesting and useful material, but its a substantial time commitment each week.","This course teaches you how elegant and flexible programming can be. There is very little \"clever\" code, but there are a great many reusable and extensible techniques that will make programming seem natural rather than arcane. It is a great way to get one thinking about the general procedures and architectures rather than for-loops. Plus you do a lot of very cool things, like make a computer algebra system, and it's not even that hard once you know what you're doing.","Great class, but tons of work.","Give the class the time it needs, and you'll be fine.","Even better than CS50! Take this if you're serious about computer science.","This is an excellent class!  It's exciting to refine your programming skills and learn from an enthusiastic instructor.  The course has been carefully considered and the Ocaml\/Java structure worked well.","This was a good course that had a lot of great ideas and was overall well-executed, especially in comparison to previous years. The difficulty gets much higher for the last few parts of the class, but learning about how to be a better, more efficient programmer was worth it, I think. It's neat to have a general overview of computer science ideas that's more technically in-depth than CS50."]},"Spring '11":{"comments":["It is not phenomenal. It is adequate and it teaches what you need to learn, but not in a particularly satisfying way.","Great professor","I wanted to like this course. Unfortunately, a frustrating grading system and the course's slow pace all but ruined it for me.","If you have a lot of time in your schedule and want to become a competent programmer, this is a great class.","This may be the best computer science class you will ever take.  It inspired me to pursue computer science as a concentration and research area.  Professor Morrisett is an outstanding lecturer, teacher, and person.  TAKE CS51!","Great course. In my opinion a lot more fun than CS50.","Work hard on the problem sets, especially the testing, because it's not enough just to have it sort of working, it has to be almost perfectly bug-free and well written code to get a great score.","If you liked CS50 a lot, think about taking this only if you have a solid understanding of programming and are able to pick things up really quick. If however, CS50 was hard for you but you still liked it, then think long and hard before you take CS51. It is a big difference in pace and depth than CS50. If you don't have a solid programming background, you will find yourself spending 12+ hours on each problem set and at every office hour.","This class is not too difficult, but definitely a must for anyone with even moderate interest in computer science. This class is not about coding as much as it is ideas, and the concepts it teaches are both interesting and essential to any developer. This is what separates script-kiddies from real developers.","You will definitely feel pretty badly about yourself after taking this class. In CS50, I felt like the paradigm was \"you need to put in a lot of time, but you'll feel really accomplished afterward.\" In CS51, the class required as much if not more time, but there was never any real feeling of accomplishment. 20+ hours a week and still being totally average in the class feels pretty crappy. But, total confidence destruction aside, the course material is fascinating and worth learning.","Good introduction to OCAML. Take this class if you want to learn better coding practice. Be aware that some things like commenting are forgotten about.","Only take this class if you're willing to work hard and you have a lot of free time to devote to it.","I took CS50 cause I thought programming would be cool. And then I took CS51, and I realized that programming is meh, but THINKING about how to program things best, especially in OCaml, is like, the coolest. Morrisett is an awesome professor with a great attitude to him that makes lecture a blast. OCaml is honestly the funnest thing to hack in (most of the time) once you learn it. I can't recall ever getting PUMPED about tackling problems for a class. But for the OCaml psets, at least, I was so excited to work through problems. So material is great, professor's great, staff's great, big fan of CS51 even if I may have screwed up a bit on the last bit of the course. Regardless of whatever I end up getting in this class, I don't regret taking it. Awesome, awesome class and material. Big fan.","CS51 is a very instructive course. It introduces you to basic programming practices so that you learn how to code well, not just throw stuff at the screen. It also helps you reason about programming and understand why certain aspects of programming are important.","you need to be serious about learning CS. as Greg states over and over in class, this is NOT CS50. It's a whole different ball game","Cooler topics then CS50.  This is where you actually learn how modern software development is done.  Time consuming but definitely manageable.  Don't expect to come out of the class having mastered any specific programming language, but instead understanding the core ideas and tradeoffs involved in software design.","Take this class if you enjoy programming - simple as that. Prereq for most upper level courses, and well taught to boot. :)","This is a great class to take, and as a CS concentrator, it's pretty much necessary. However, I would be wary of even believing that the view obtained from the course is objective. There are clear preferences on the side of Greg and the staff for functional programming, and imperative forms of programming like Java seem to get shafted.\r\n\r\nSimply put, it's perfect for depth exposure to functional programming. For Java\/OOP, unless you've taken APCS already, not so much.","Definitely valuable for learning functional programming, but OCaml is not that worth knowing unless you plan to interview for Jane Street. Functional programming the context of Javascript, Python, or Ruby is probably more useful in real life. Using ML to learn functional programming was definitely valuable though, and teaches you a lot about cool abstractions.\r\n\r\nI didn't feel like this class taught Object-Oriented Programming that well, but they did a decent job. Java was not taught very well this year, in my opinion. I feel like the teaching staff added on Java because it would be a good language to teach OOP in (it is), but they didn't have very much experience with Java beforehand.\r\n\r\nOverall, if you feel very comfortable with CS and\/or have more CS background than CS50, then you shouldn't find this class very difficult or time-consuming.","The difficulty of this class really depends on the level of experience of the student coming into it. Of course, and beginniner, like myself, is going to struggle a lot more than someone more experienced. You'll have to put in more work and effort, and that may be frustrating but you'll end up a better programmer. That being said, the problem sets ARE very doable for beginners as well. Just go over the lectures, and actually do the problems at the end of the slides. Also, go to office hours if you're stuck. And start the psets early. I'm not kidding, just chip away at it every day.","CS51 is a bit harder in concepts than CS50 but less time intensive. It also provides a very nice overview of all the basic CS concepts that were not covered in 50. You should all study CS and you should all take this class.","Functional programming is probably more interesting than you think.","The class is a lot of fun, and I didn't find it too hard. Do make sure that you actually want to learn functional programming before you take the class, though.","No background knowledge of cs is necessary other than cs50. however, be warned the vast majority of students have had a lot of prior experience with components of this course. It makes it extremely hard for students with no prior knowledge to keep up.\r\nIf you have no prior experience office hours will be your lifeline. Go to as many as possible.","It's great, Greg's a great teacher, it teaches a new way to program for new programmers.","There is a lot of work, much of which may not be rewarding.","Get ready to be angry and frustrated.","The class is interesting and rewarding but if the only thing you took before this is 50, then it's VERY difficult unless you have a really solid math background, in which case it's still difficult.  Be prepared to spend a lot of time on it.  You'll learn a lot and it exercises your mind in interesting ways, but it's really really tough.  Don't get discouraged or allow all the terms to mess you up - they're really simple; I sat in lectures constantly googling definitions and it worked out (I rewatched them later, taking notes then, which was much more effective).  Get some really skilled coder friends to help explain things you don't understand because you'll need it - the support system is there, but not incredibly strong.","it's a lot tougher than cs50","It is very well taught. But think HARD if you are considering taking this as an elective. If you are not already quite versed in CS or gifted you will probably not get a very good grade, and it will eat your life in terms of time. You don't *need* much preparation but if you don't have it\/are not extremely mathematically gifted already the kids in the class who have been hacking since middle school (and are taking artificial intelligence simultaneously) and the math geniuses (like the 6th year grad student in pure math who was also taking cs 124) will destroy you and take the good grades. Technically you don't need CS50 but you really should have done object oriented programming in the past, or the Java part will come and you will be underprepared.","Greg is a great instructor and some of the course staff tend to be quite good. The course teaches to the lowest common denominator, and there's no more comfortable section so theres probably less to do for the more capable than in cs50. My year they had to waste a lecture going through make files because people couldn't use a man page and understand how they work.","This class is more applicable to actual programming than CS50. Prof. Morrisett is an amazing teacher and really hope you get Rob B as a TF. The final project is by far the best learning experience you'll get in the course, so make sure you pick a topic you want to work on and don't mind spending hours on.","If you are interested in learning about CS, take this class. Extremely useful to learn about functional programming as the lessons are broadly applicable.","If you've taken CS50 and enjoyed it, I would urge you to think twice before you take this class. Do not take this class if you are a freshman without an already well-honed talent for mathematics or logical reasoning. The material becomes quite advanced very quickly and much of the advanced material in psets is only lightly touched upon in class. Do not take this class unless you are extremely confident in your ability to think abstractly about computer programming.","CS50 lectures: fun but you learn by yourself. CS51 lectures: boring but Greg actually teaches you stuff. I enjoyed CS50 more, but CS51 is a class worth taking.","This is a much better introduction to CS than CS 50.  If you're unsure, take it.","Don't get the textbook, you won't need it. If you have some background in CS, this class can be rather easy.","A great course to take if you've taken CS50(and a little easier, I felt). I felt like I actually took something from this class. My only advice is that students should prepare ahead of time for their final projects.","A must-take if you are considering concentrating in CS or just want to get better at it.","Make no mistake--CS 51 is not CS 50.  It's much more time-consuming and \"serious\" course without the bells and whistles of 50.  But you'll probably also learn more than in CS 50.  Every so often when we did a problem in the ocaml portion of the course I found myself smiling at how clever a solution it was.  Constantly coming up with clever little ideas goes above and beyond what CS 50 asked for, but you'll find it's also much more rewarding.","This class is a great next step from CS50.  The psets are fun and interesting.  Moogle was incredibly rewarding.  The TFs are great and OH's are really helpful.  Just keep in mind that there is both a final project AND a final.","Not the most challenging class, but it reinforces good design practices you will probably benefit from for the remainder of your programming career.","You get a good idea of what CS is like.","The course is great, but conceptually difficult.  You won't learn as much programming as you might think.","Take it. (If you like CS)","The course is great, I learned a lot of Computer Science principles (NOT programming, but actual principles). The psets were graded a little harshly sometimes, but overall a fair, fun course.","CS51 is an excellent course and I'd highly recommend it.  Though more difficult than CS50, you will walk out of this course with significantly more confidence in learning new languages\/tackling higher-level questions.","This class is a great introduction to functional programming. It's very reasonable, and Professor Morrisett is great.","This class may seem difficult but if you put in the effort and pay attention to lectures and go to section, it really isn't that bad. But it is definitely a big step up from CS 50.","This was one of my favorite classes at Harvard and is extremely well taught.  If you have the slightest interest in CS, you should definitely take this class as long as Greg is teaching it.","Abstraction and OO programming are extremely important but this class isn't that well taught..","Never went to lecture and I do pretty well. But if you do go to lectures I heard they are really fun. So win-win both ways.","Awesome course. Good for Computer Science theory","Don't hack. When Greg says you should reason about code, he isn't kidding. The class isn't too hard if you actually take the time, before typing anything, to think what is going on and how you should contribute.","This class is fantastic! A little more difficult than CS50, but definitely take it, even if you're not doing a concentration or secondary in CS. Greg Morrisset is an amazing professor, and the problem sets are really fun to do. The midterm and final are pretty tricky. Just make sure to pick final project partners who are CS concentrators, are taking the class for a letter grade, are good programmers, have taken CS50, respond to emails, and actually care about the class. I learned my lesson the hard way.","It's a requirement. Take it if you have to. Otherwise, go take some other more interesting coding course.","Yes. ML can get pretty funky (and yucky) though","I believe this was the second year of OCaml and Java, and it's a great way to frame the course material. You definitely build so much on the base established by CS50. Take this class! Moo!","It is helpful for improving your programming skills, but it is a lot of work.","A lot of people don't want to take this course because it's an intro class and they think it's too \"easy\". Even if you have quite a bit of experience programming (probably object oriented and the like), this course mostly discusses functional programming, which is quite different and also more elegant in a lot of ways. It also exposes you to some higher level concepts about programming languages, through comparisons of OO and functional programming. Either way, you'll come out of this class knowing quite a bit more, so give it due consideration!","Make sure you have enough time for this class. Taking this class with CS 124 is difficult and really unnecessary. I regret doing this.","If this class is taught in Java again next year, you should probably do some Java before coming in to this class. The class does a very poor job of teaching Java, but it's GREAT in teaching functional programming and OCaml.","The course itself is still slightly unorganized, but the class is very informative and you actually learn computer science. If you really want to learn about what makes CS tick, take this class, but expect some tough assignments. Also, start working on your final project ASAP. It is definitely better to get as much out of the way.","Make sure you have a good partner for the projects and everything is easier. I can imagine the class becomes much more difficult\/less fun if you either don't have friends in the class or are forced to do most of the work yourself.","You can take this without 50 if you took APCS in highschool or equivalent background. Really cool course, you can do the psets without going to lecture, but study hard for the tests.","An excellent class to take if you enjoyed CS 50 and are thinking of concentrating in CS, or even if you're not and just want to see what \"real CS\" is like. Slightly more theoretical than 50 and more focused on writing efficient\/good code rather than just the basics of programming, but not esoteric and still heavily focused on programming as far as assignments go. Expect assignments to take a little more time than 50, but still very manageable.","It's a lot of work, but not much compared to other CS classes. It's basically split into two parts: Java and Ocaml (Object Oriented and Functional programming). Even if you know the languages before taking this class, it's still a challenge because the problem sets require a lot of thought to find the best way to solve the problems. The only thing two things I didn't like about the class were the fact that there's a final exam and a final project, and that they didn't teach much of the Java library, which is really the best thing about Java. Drop the final exam and talk about things like ArrayList, HashMap, LinkedList, etc. and this would be a very good class.","The course complements CS50 well in introducing you to basic principles of computer science and programming and is worth taking after CS50. It definitely expands your ability to learn more in CS.","CS51 is a great follow-up to CS50. The class teaches you how to program with style and efficiency, while introducing you to functional programming, which is seldom taught to beginning programmers nowadays.","You'll quickly realize that you're not in cs50-land anymore, but the Wednesday and Thursday night office hours in the SC might seem familiar. It doesn't take as much time, but the material learned in each week seems denser. Overall a good course, and Greg's a great lecturer.","Start on your final project early on!","definitely take it if you have any interest in computer science beyond the level of cs50. it is tough at times, but worth it in the end.","This is a great CS course. But--and here's the one caveat--this is definitely not CS 50. It's especially shocking after you get out of the hand-holding, utopian CS 50, where David Malan's wisdom flows freely like the nectar of Zeus. No, no, Morrisett throws you into the mix right away. Perhaps they should ease you in better, but this course separates the men from the boys. Functional programming is useful. Not entirely practical, but it makes you think a certain way, which is good.\r\n\r\nShould you take this course? Yes. Will you like it every minute? No. Definitely not. But you'll like having taken it after the fact. Oh, and get to know Morrisett. He's definitely one of the coolest, chill, funny, smart guys at Harvard.","Ocaml is like math.","lectures aren't very great, there are a few that are interesting. section is definitely helpful, attending will help in understanding the concepts that aren't really well taught in class.","If you're majoring in CS this class is indispensable (and required so I don't need to tell you this). If you're not majoring in CS but are just interested I would still suggest this class. It will deepen your understanding of the challenges of programming, both to make you a more conscientious coder and (perhaps more importantly) a better judge of others' code. And regardless of programming, it will challenge you to reason differently and more completely about problems.","Take it if you want a secondary\/major in CS, learning to think functionally about programming is a necessity.","If you don't understand recursion, learn it!","An absolute must for anyone interested in coding, but requires a lot of time, and the grading is harsh.","It's a lot of work, but if you get started early, it is very doable.  It's certainly not a GPA booster, but I really enjoyed functional and objective programming.  Make friends with the TFs and GO TO OFFICE HOURS!!  Programming is definitely a skill worth learning.","If you are interested in programming and haven't seen functional programming before, take it! Even if you don't use it, it teaches you a lot of concepts that make you a better programmer (and are extremely interesting.) Don't get scared away by the first few lectures with ocaml - I was very scared when I saw my first bit of ocaml code, but it really is not that bad.","This is a great class for an introduction to functional programming. A lot of cool concepts were brought up.  The psets were ok; they could be extremely unclear\/confusing at times but the problems themselves (once you finally understood what was being asked) were good.  Also, the teaching staff was a bit slow to get graded assignments back.","Great class. Taught well. Professor is excellent.","I now have an appreciation with all aspects of computer science from languages to programming to the commercial process that goes along with it. Gained both perspective and hard skills. Also Morrisett is a fantastic lecturer and professor. One of the best at Harvard.","Great class, definitely recommend it! Don't shy away because it's OCaml -- the OCaml part is actually much cooler than the Java part.","It's a phenomenally interesting course - you'll get a much better understanding of how different programming paradigms and languages work and how to use them to build better software.","It really teaches you the way to think CS like. A lot of higher concepts were introduced. OCaml is very cool too.","Great class!","Less brute work, more conceptual difficulty than CS50.","This is a goods course, but don't take just because you thought cs50 was fun.  This programming is much harder, but if you like cs then it will be worthwhile.","it's a good class, much more well-run than (apparently) previous years' versions of cs51. the psets are pretty fun but there's nonetheless a lot more 'real' coding than cs50, i think; in fact, i actually enjoyed cs51 more. on the possible downside, there are a lot of kids who find this class really easy, and if you don't have a ton of programming experience, you might find the curve a bit steep as a result (esp with the exams' grades). i'd only ever taken cs50 and felt a bit overwhelmed at times; psets took me between 5 hrs (an occasional good week) and 15 hours. overall a surprisingly good class, but not a walk in the park.","Some people seem to dislike this course because of the foreignness of functional programming; I personally thought the lectures and section assignments taught Ocaml very well, and I loved the course assignments overall. The exams are pretty tricky and the final project will probably consume your life for a bit, but it was a class I was genuinely interested in.","Don't bother taking this.  It's not hard and your time is better spent in other classes.","study hard for the midterm and final!"]},"Spring '12":{"comments":["Class is difficult and abstract, like no other CS course you've taken before. That said, if you're willing to put in the work you will become a pro at abstraction and pure functional programming. It's what you make out of it.","If you're at all interested in a secondary or concentration in CS - take this course. Morrissett is awesome; try to get to know him better. Be prepared to put in ~12-18 hours into a pset (so start relatively early). Keep up with the lecture material (there's a close tie between psets\/exams and lecture material). Section is optional - I didn't find it very helpful (usually just a regurgitation of lecture material) but having a TF as a go-to resource may be a good incentive to attend.","Great class. Apart from the material being incredibly important for those wanting to pursue CS further, the lectures were interesting (and they're videotaped!) and the assignments were challenging but rewarding. There's also a great support system in place, though they don't coddle you as much as in CS50. Overall it's a very manageable class; I learned a lot and it stretched my thinking in new ways without killing me!","If you're interested in Computer Science, then this course is fantastic. CS 50 is great for people who aren't interested as much in studying CS, but want to take a course in it. CS 51 is an awesome course for those who are genuinely interested in the field of CS itself.","On the bright side, you learn some good programming paradigms in this class. The class will attempt to teach you how to program efficiently, cleanly, and smartly. Most of it's somewhat common-sense (e.g. factor out repetitive code), but it helps to have people hammer it into your head. I'm impressed by the dedication of the TF staff, though to be frank I didn't get much attention because there are just so many people asking about so many bugs at every office hours. \r\n\r\nCS lectures are hard to do well, and I thought Professor Morrisett did a pretty good job. He tries to make it engaging and interesting, and I did feel that I learned a good deal from them, though the combination of constant Q&A and inessential demonstrations led me to devote less than my full attention. The problem sets are OK, but very cookie cutter, and feature very little room (in fact, I'd say none) for making your own design or algorithm choices, which means that they are both less interesting and involve a lot more drone-work. \/\/ \r\n\r\nMy final complaint is that I thought the tests were pretty poorly written, in the number of errors and the choice of material.","Brace yourself.","Be very cautious about your choice of final project. It may kill you.","It's great!  CS50 did an excellent job of getting me interested in computer science, but I think I enjoyed this class more because I found the language (Ocaml) much more intuitive than C, the material in general seemed more organized, and the exams were much more reasonable and less random.","Ehh... Mixed feelings about this course.  Greg is an amazing instructor, but only take this course if you're into the whole abstract part of programming.","Definitely take it! Greg Morrisett is a wonderful lecturer, and you'll learn a lot. The psets take a lot of time, but what else do you expect from a CS course?","Take this course if you are really, seriously interested in programming or enjoy problem solving. Do not take this as a fun continuation of CS50 because you will find out on the first day that this, indeed, is not CS50. This class will take you into the depths of the ocean of Recursion, teach you about functors, modules, functions that take in functions, parallel programming, concurrency, locking, Big-O of space and time, and binary search trees. If that excites you, by all means take this class. But know that it can be unforgiving, that you will be challenged to an extent you never knew you had, that you will be stressed, that you will go through all this in the name of \"wanting to be a good programmer.\" This can be a bitter experience and if you are one of those people who worry about their grades too much, just keep that in mind.","Be prepared to do a lot of work, but also to learn a lot about computer science and the direction in which modern technology is heading.","The topic is SO INTERESTING. Function language is awesome! This is what salvages the course. Otherwise the course would be a disaster with staff that just can't stay organized or care about the course to do logistics correctly. For such a large class that has been going on for many years, I was surprised at how disorganized the psets were. Grading takes forever, and you get almost no feedback. Poor structure, but good content.","Its difficult but rewarding.","Functional Programming is awesome!  I liked CS 50.  This was waaaaaaaay better than 50.","I recommend CS51 with major enthusiasm. It's probably the most rewarding course I've taken at Harvard so far. The information and practical CS skills you leave with (abstraction! efficiency!) are completely worth the work. It's rather difficult, but never unfairly so, and extremely rewarding if you put in the time to grapple with the material in assignments. Don't put off problem sets until the last day or so, because while you might be able to piece together decent solutions, you won't absorb the material in a meaningful way. If you give this class the requisite amount of time, expect to love it. Professor Morrisett is an engaging and super-knowledgeable professor who loves his subject. Take this class if you love CS, or if you want to find out if you actually love CS. While CS50 gave me a taste for CS, it was 51 that made me really appreciate the discipline.","Expect to work hard on problem sets, but most can be finished in a night or two.  Make sure to read through the spec\/section notes\/lecture notes before hand to get an idea of what will be required in the assignment.  Start the final project early, and there are checkpoints to make sure you stay on task.  Be sure to focus on the overall design of the project, not just the algorithm implementation.","Taking this class will let you know whether you want to do CS. It's great!","CS51 is both more enjoyable and more interesting as a CS class than CS50. The problem sets will hopefully become less ambiguous and buggy (especially the last one on object-oriented programming) over time, and the final project will probably be revised according to student feedback.","You will become a much better programmer, but the course will require a lot of time from you.","It's a great introduction to functional programming (if you've not had experience with that before), and the final project is pretty involved and interesting. The psets are a good way to learn the material.","CS51 is a challenging class. Morrisett kept his promise of turning our world upside down with Ocaml but it helped me see past the syntax and gain a deeper understanding of best practices in programming. Assignments don't take hours because you have to write a lot of code; you spend most of your time thinking and end up writing just a few lines of code.","The class is difficult, but the reward for correctly learning the material is great.","take the class","Great follow up to 50. You will learn to be a better coder (or at least to think about your code). Functional programming is amazing and definitely worth knowing about. Take this course if you want to take your coding up a notch (good for CS majors and non-CS majors alike, but not as hold-your-hand as 50).","Start the problem sets early\u00e2\u20ac\u201dthe difficulty varies widely. Just because one is easy doen't mean the next one won't beat you up. The following week's may again be easy\u00e2\u20ac\u201dyou just have to look closely at the writeup and start coding as early as possible.","OCaml is a very elegant language with questionable usefulness. I don't think the class is necessary for people who don't plan to take more CS classes later.","It's WAY better than CS 50, that is, if what you're looking for is real computer science and actually valuable material as opposed to a programming course. In 6 months you won't remember how to define a struct in C but you will remember the principles of programming you learn in CS 51.","This class will break you down and build you up.","Learning functional programming is extremely helpful to developing strategies and improving ones mindset for constructing solid code.","THIS IS NOT CS50. The lectures are incredibly boring, the assignments are syntax and testing oriented and poorly organized. Greg's a good guy, but he's got his own agenda in terms of what he likes about computer programming, and overwhelmingly detail and syntax oriented. Definitely don't take this class if you want to do something other than software engineering for a career.","Professor Morrisett is a great guy, and though the course may seem difficult at times, it is actually really fun and enjoyable with the exception of the final project (but that is my personal preference).","If you're considering taking this class and CS124 simultaneously, think very carefully. In fact, don't even take CS51. Everything you learn in CS124 is more applicable, better thought out, and more interesting than CS51. Maybe they'll revise this class for next year, but given that they've had years of experimentation and still managed to botch two problem sets such that the teaching staff themselves recognize that it's a mistake, I wouldn't get too excited.","Take it. Greg is awesome, and the material covered in class will really make you think. You'll realize there's more to CS than the code itself. This class is all about elegance in thought first, and then in your code. You'll emerge with a clearer and cleaner approach to problem solving.","If you want to do more programming at Harvard, take CS51.","Allocate a lot of time for the assignments. Plan your projects responsibly. The tests are cake.","The class is more conceptual than CS50, so that what you learn fits under a more unified paradigm (which depending on your preferred learning style, might make the class easier to comprehend). You should start psets earlier (as usual, it's harder to code under stress). Professor Morrisett is an awesome awesome lecturer and has a strange fascination with cows. Moo!","Very challenging but very rewarding.","This course will help you to become a better and more thoughtful programmer.","Seemed like mostly a solid course - I feel like though people didn't really get into the course and it was a bit lackluster, perhaps.","Take this class! It's much harder than CS50 though, in the sense that you have to be able to think a lot harder. Less just making cool stuff (though there is still some of that!), more thinking about problems interestingly.","TAKE THIS CLASS. This is an amazing class that will teach what CS really is. Although CS50 helps in creating enthusiasm around CS, CS51 is going to show you how beautiful and at the same time hard, programming is. Greg is an excellent lecturer and you should attend all lectures. It's of course a lot of work but totally worth it.","Can be hard if you don't \"get\" programming and logic","You learn a lot of really great programming topics, such as functional programming, object-oriented programming, and concurrency. This is a difficult course, but essential in the curriculum of a computer scientist.","Seriously consider that this class takes a lot of time. Difficult p-sets (which are much harder than CS50) but take just as long, if not longer. A group project due during reading period (while you still have other p-sets to do) along with a midterm and final. You will constantly be working for this class and your social life\/ happiness will suffer if you're taking other difficult classes. The professor is awesome and you will learn a ton of useful info about good coding practice, BUT these are some things to consider before you take the class.","This class is great!","Cows!!!","Personally, I really enjoyed CS51 -- but whoever said this class is easier in some ways than CS50 was either a huge boss or a troll. The class is in every way more difficult than CS50; it is a huge time commitment and quite difficult, especially during the late nights of psetting. That being said, Morrissett is a great teacher and I am incredibly glad I took the class, but be prepared to be shaken from the \"bells and whistles\" mentality of CS50. It's definitely conceptually more difficult as well.","This class is very time consuming and very hard, but very rewarding","Take this class if you like a cool quantitative class.","While perhaps not as time-consuming as CS50, 51 definitely requires you to think harder about your code. That being said, the rewards are immediately evident - while you might not come away with a ton of practical knowledge, you'll be a much better programmer and the skills you learn will spill over to any future CS-related endeavor that you choose to undertake.","CS51 is real computer science at it's finest. It is fun, informative, and challenging.","This course is good for learning how to refine your programming skills.","Be ready to work hard.  You feel a sense of accomplishment once you get through this course.","This is a time consuming course. Problem sets will take a long time. Nevertheless, everything in the course is doable. There are enough resources to complete every assignment and to help you learn any difficult material. I would highly recommend this class to anyone who enjoyed CS50 and wants to continue exploring computer science. However it is also important to note this is not CS50. I found CS50 to be a over-glamorized presentation of what CS is. And although I enjoyed that course, I enjoyed CS51 more because it felt like it was presenting more of the challenges and methodology that actual computer scientists face and use.","This class is a great sequel to CS50. It continues to develop your foundation as a programmer. You might never code in OCaml again but the concepts it teaches are extremely useful in learning other languages. I am currently learning C# and making the connections to OCaml is really speeding the process. The class also teaches you general techniques on how to approach and solve general problems in computer science. extremely useful if you plan to continue in the field.","This course is really enjoyable and should be taken by a CS concentrator or secondary.  Greg is marvelous and the problem sets are interesting.  Functional programming is a really useful paradigm even if used as a guiding principle in other styles.","You learn a lot of extremely useful programming concepts like abstraction and object-oriented programming.  After taking this course, I feel much more comfortable approaching programming projects on my own.  It's a very useful and generally well-organized class.","This is much harder--but also more intellectually stimulating, and not necessarily as a result of being harder--than CS50.","It's a good course if you have a good tf. And be prepared to spend all of your time on this course.","Its very different from CS50, with much more focus on learning to program well and efficiently. Definitely interesting for more math-focused people.","If you just took CS50, enjoyed it, and are looking for another CS class, think very seriously before picking this class. The support system and fun culture that everyone loves in CS50 is nowhere to be found in this class. In CS50, I had to put in a lot of hours, but still got an A without too much struggle. In this class, I pulled multiple allnighters to finish problem sets, and still ended up failing those problems sets.","Take CS61 instead. You will live a longer, better, happier life.  No but seriously, this class has absolutely no regard for the fact that you as a busy Harvard student with other classes, extracurriculars, jobs, and commitments. Additionally, CS50 is not really adequate preparation for this course - you will be much better off if you have CS50 and CS61 under your belt before undertaking the task that is CS51.  On another note, whether you find it relevant or not, Prof. Morrisett takes pride in being incredibly caustic and condescending in his everyday speech and lectures. If you're a sensitive individual, tread lightly...","This class is great for teaching you how to be a better programmer and improving your reasoning skills when writing code. Although OCaml is not a commonly used language, I actually really liked it after coding with it for a while in this class. The psets normally take a long time. Some of them were interesting while others were sometimes tedious. One aspect of the class I really liked was the team project. If you can get together a group that's really excited about an idea, then you could develop something that's really cool and practical. Overall, I'm very glad I took this class because it taught me many concepts and things that definitely made me a better programmer.","This class is great, but it is not easy in the slightest. The PSETS are deceptively long, so you shouldn't assume that because this is an intro course that the commitment will be low.","Prior to walking into this class, I was a terrible computer programmer. I wrote lines and lines of sloppy code that just happened to compile. Now, I can say that I'm infinitely better. This is a hard class and requires a lot of time. However, you need to take it. Trust me, you'll walk out with a much greater understanding of writing good code than you ever thought was possible.","... so I'm weird, but I liked to start psets a week early not because I was diligent, but because they were fun.","Excellent course - teaches you to think differently.","A great class. Hard but really good. And it teaches you how to write good, short, concise code which looks beautiful and runs well.","I highly recommend this course to anyone with a programming background. I did not take CS50, and in fact this was my first CS class of any sort ever, however I've been a hobby programmer for a number of years, mostly using Python. I found that background to be more than sufficient to do well in the class. And I learned SO MUCH! I may have been able to write code before, but now I write GOOD code. I didn't even really know the difference before, but it is really important. So take this class. Write good code. OK?","THIS IS HARDER THAN CS50.  At least as hard.  At least as much work and more challenging conceptually.  By that I mean you're not dealing with if statements and for loops, like in CS50, but rather complex data structures, parallelism, modularization, and event handling.  If you did not understand recursion before taking this course, you will have a deep understanding of it afterward.  Plan on spending a lot of time on the psets.  The class ends with both a final and a final project.  One of the hardest classes I've taken.","great class!  The problem sets are really fun and you don't have to go to lectures as long as you study the powerpoint presentations.","Despite its challenges, tough problem sets, and exams, CS51 is one computer science course that you will definitely not regret taking. It lifts and polishes your thinking of computer science problems so that you leave the course a much better computer scientist. The problem sets are in OCaml, and while this isn't a very useful language in the every day world, Professor Morrisett has chosen an excellent language to convey the ideas and skills his wishes to teach his students. I highly recommend this course for anyone who is even remotely interested in computer science or wishes to think and write like a true computer scientist. Oh, and Professor Morrisett is incredible.","Awesome class. Really cool materials, and the staff are great. Please don't just stop after 50!","Be willing to work hard and you'll learn a lot. This is a way to \"zoom out\" from something like CS50. There are some kinks that they'll keep trying to work out (i.e. problem sets that are unintentionally too difficult), but overall it's a great course and worth the effort. Section was excellent - definitely go!","This course is extremely difficult, but you will learn a lot. If you are a CS concentrator, definitely take it!","This class can be run better. Yes. But this class has taught me SO MUCH over the course of a semester that none of that matters. You come out a completely transformed programmer and thinker. It was the hardest class I took this semester, but it was all worth it. Be warned -- problem sets are a pain sometimes.","CS51 is difficult, but doable! You get what you put in!","It covers a lot of material, and some of it may be interesting to you, and some of it may not be. Even though Prof. Morisett is extremely knowledgeable, lectures can be a bit scattered\/run on tangents.","This class was so much fun! I did not take CS50 but took AP CS in high school and it was completely fine. The class is self-contained so as long as you pay attention to lecture and put the time into the psets, you will do great. The professor is awesome. People tend to skip lecture a lot because it is video-taped but I personally went to every single lecture because I found the professor very entertaining. The book is helpful to read along but it is not absolutely necessary if you don't have the time to sit down and read the chapters. The project at the end is not as much work as it seems, because you have a group of other people to work with, it is really doable. Section is really helpful, go to every one of them!","This class is very different from CS50. You should take CS51 only if you're serious about computer science--it's not sexy, and it's not stuff that has tons of direct real-world applications. If you're going to take this class, be prepared to think abstractly and recursively. With all that said, Ocaml is a cool programming language, and this class can be pretty mind-blowing at times.","AAAGH I LOVE THIS COURSE!! <3 OCAML <3 MORRISETT. he's so good at teaching. i put a lot of time into the p-sets but got a lot out.","This class is way more interesting then CS50. The class isn't very difficult in terms of the material, but the problem sets take a very long time. Be prepared to spend a few days working on them.","This course made me such a better programmer. It really reinforced important concepts that every programmer should know, especially because I didn't have any background before CS50. It teaches you A LOT, and Greg is an amazing lecturer and wonderful guy all around. I find myself applying what I learned here to so many difference aspects of coding, even if I'm doing web-dev with PHP or something. It's a really good course. It's definitely tough and challenging, and I've seen way too many sunrises throughout the semester because of it, but it was worth it.","In this class you will truly learn to program","Course materials are great, and functional programming is really, really interesting. Doesn't require too much work. Problem sets can be tedious.","This class can be really hard, but only if you make it like that.  I didn't start problem sets until the night before they were due, rarely went to class, and rarely went to section.  If you do the opposite of these, or just start the problem sets earlier and go to lecture fairly regularly, it will be a lot easier for you. Also, even though Morrisett may kind of seem like a dick at first in lecture, he's actually a nice guy to talk to. Ocaml's pretty cool; projects aren't. You should probably take the class.","Functional programming is definitely an important concept for modern computer scientists to be familiar with. It's fun, not terribly time consuming, and it makes you think differently about the flow of programming.","Somewhat harder than CS50.  OCaml is an interesting language, and it takes time to grasp the syntax of the language. Go to both class and section.","This class was very refreshingly realistic after all the bells and whistles of cs50. Functional programming is useful once you get the hang of it, and the psets are not *as* time-consuming as many of the CS50 psets. Morrisett is a fantastic lecturer, and the tests are very doable. Make sure you pace yourself on the final project. Overall, a good course, though (like all CS courses) a fairly time-consuming one.","While this course can be frustrating and the lectures uninformative, the subject material and psets are excellent. I ended up using this course like a directed self-study.","You'll learn a whole new side of CS.","its a lot of work, but if you put in time to make your psets really good and if you really try hard to understand the material before starting your psets (but definitely start >3 days ahead) then you'll do very well on psets AND you will find the exams quite easy. Prof Morrisett is wonderful.","If you are uncertain of whether to do CS as a concentration, take this. Many people think that they love CS just because they took CS50. But let me tell you: CS50 is not computer science. The materials introduced in CS50 is at best elementary and if you enjoyed it, it may partly be because it is so easy and extensive help is available. But CS51 is more like the real-world computer science you are going to face. Problems are not always as interesting and demand much more problem solving skills that what you need in CS50.\r\nTake CS51 to get a real taste of CS.","start psets early","Take it if you want to do CS or need to for engineering, but be aware that the teacher isn't interested in being nice and the problem sets can be ridiculously time consuming. Do yourself a favor and look up OCaml (or whatever the language they expect you to use in the future) during winter break and try to learn at least a little bit of syntax, it will make your life easier. Get good project partners early.","Pick people who respond to email for partners when doing the final project.","If you liked the data structures part of CS50, and want to learn more abstraction, data structures, modules, and object-oriented programming, take this class! It can be a lot of time, but you'll definitely come out of the class a competent programmer.","If you just took CS50 and were intrigued by the topics of CS and are considering a secondary or a concentration, definitely take this course to see if CS is right for you. This course is definitely not a cakewalk and you'll have to put the time in to get something from it, but I recommend it to anyone who's on the fence about CS.","CS51 is not CS50, but it will give the wonderful foundation that CS50 provided a lot more heft. Definitely take it.","This class is more difficult and time-consuming than CS50. It is a great class and at the end you feel like you learned important material, but the process is difficult and sometimes frustrating.","Best class I've ever taken. Has taught me everything I know about coding. Material is the best I've encountered. Real world lessons, design principles, software engineering practices, functional programming. Morrisett is a boss. This is not CS50.","Be ready for a CS class that is time-intensive, challenging, and often frustrating.  Say goodbye to your Thursday nights (and perhaps, your predetermined notions of being a CS-concentrator!)","Not as hard as everyone says and totally worth it. Not easy, though.","This is a great class. Greg is an excellent and enthusiastic teacher. Watch out for the grading though. The TA's will make errors that cost you serious points, so you have to be constantly vigilant.","This class is not difficult, but problem sets will take a very long time. The final project may also be difficult if not planned out properly.","Ocaml is actually the best thing ever.","CS51 is a good deal more difficult than CS50, and compared to CS50, CS51 doesn't have that \"cool\" appeal either.  Morrisett is a good teacher, though, and the TFs are all good too.  Make as much effort to go to class as possible, because unlike CS50, lectures are generally really helpful for problem sets.  Problem sets are due on Fridays at 5pm which sucks because that means that your weekend doesn't start until then (or Sat at 5pm if you choose to take a late day -- you have two).  It's a bit frustrating how long psets take.  Essentially, if you don't get started by Tuesday, you have no chance to complete them.  The final group project checkpoints (which start in February) are annoying at times, but helpful for keeping on track with the project.  Make sure to find a good group.","Just make sure to stay on top of the material and have fun with the problem sets! Instead of trying to memorize all the nit-picky details, try to get an overall understanding for the logic\/reasoning.","This was a great class to take and it really helped me solidify my enjoyment of computer science.","CS51 is a great course, it provides you with a solid understanding of how abstraction works in the grand scheme of functional programming.  While the language the course is taught in is not really that applicable outside of class you will come to love it over the course of the semester because:  (1) it puts all students on the same semi-level playing field at the start of the course, (2) it forces you to understand the material from a theoretical sense so you can readily apply what you learn to other languages, and (3) the \"type\" system in OCaml really forces you to understand what is going on with your code (and gives you a good way to figure out what is wrong if you don't).","Good course to take, pretty useful techniques in recursion.","Take it with a grain of salt. The Psets won't be fun, but otherwise it's interesting.","It's not just \"the next class after CS 50.\" This course teaches you how to program well, and it'll push and grind you into a better programmer and computer scientist. Beware of deadlines - do not procrastinate.","Very useful for technical interviews and deeper CS logic.","This class is a fun way to learn about abstraction and functional programming in general. OCaml is a more interesting language than C. Problem sets aren't that hard, especially if you look at them earlier than the night before.","The problem sets are usually manageable with <10 hours\/week. Just don't expect any feedback on your work - the course staff is too busy to tell you what you're doing wrong. Don't expect partial credit on exams - they're also too busy to actually read your reasoning.","This course is a great introduction to both functional and object oriented programming. It leaves you with ten times the CS background you get from cs50. That said it's hard and a lot of work. It'll be your life.","Be prepared to spend a lot of time on this course. Attend office hours. And be prepared to learn a lot about where programming is going in the future. Extremely useful. Functional programming is fascinating."]},"Spring '13":{"comments":["I learned so much in this class. It is a lot of work but it really can be rewarding to complete every week. It's taught very well and I felt like I got a lot out of the class.","Good class.  Material can be hard but it's really cool to learn.  If you liked CS50, I would recommend this class because it really takes your understanding and appreciation of computer science one step further.  It wasn't that much of a stretch, but I definitely had to put the time in to work on and understand stuff.","Go to lecture! Go to office hours! Go to section! Read over your notes!  This is a class for which you cannot do too much extra work, everything will help in the end. Also, definitely have a coding buddy or circle of friends, doing the partner psets alone is a horrible, horrible idea.","You should take this class! It can be a lot of fun when you put your head into it. Go to lectures! Those are very useful! Honestly, I'm not sure what the course is going to look like next year because the professor is changing but if the next one is anything like Greg you should take it! Not a class for the faint of heart but you can't be a serious CS major without taking it.","This class is not like CS50, but if you like programming, will be just as fun. Problem sets are quite time-consuming so try to start on them early and take advantage of office hours, which are super helpful.","Lot of work. Worth it.","It is a great class but it is not for the faint at heart.  You have to be ready to accept a heavy workload.  You will learn a lot though.","it's really, really hard. :(","If you loved CS50 but want to get CS experience in a much less flashy way, this is an awesome class! It is more challenging but super rewarding, and you will learn so much about what good coding is. Also you will get a really solid grasp on abstraction and recursion, and also OCaml is awesome.","This class is great for learning about how to program well, as opposed to merely \"throwing shit at the screen\" as Professor Morrisett likes to say.   The lectures are engaging.   The two major programming assignments, Moogle and OMG Cows were very time consuming, as was the final project.   As long as you account for that time and start things early, however, the course is very doable.","Be prepared to put in substantial amounts of time frustrated with minor bugs in problem sets.","You'll be assigned multiple group projects. Pick your teammates wisely. Depending on that, the group project could end up being but a frustrating confrontation with your teammates, or an exciting learning experience.","Go to office hours. If you want your problem set code to work well\/perfectly, you're going to be spending more than 15 hours on it, most likely, and the TFs and other students are more helpful at office hours. Exams involving cramming in lecture videos that won't be helpful for the problem sets. Problem sets are really interesting but require more thought than CS50 problem sets did. Amazing class, but make sure that CS is what you really want to focus on the semester you take it.","This is a challenging but overall fun class.","If you know a lot about programming, like inheritance, data structures, and general programming familiarity, you could probably skip it. Other than that, it's a decent course that really just picks up where CS50 leaves off.","It is better than cs50","The problem sets are generally very fun, and the material is more interesting than that of CS50.","CS50 will NOT teach you how the be a great programmer, that is what CS51 is for. Even if you aren't thinking to concentrate or secondary in CS, I strongly recommend this class because it shows you how to reason about good code. You learn all about good, proven coding practices and you will be hirable as a programmer after this class.","Greg is an awesome professor! That said most of the learning happens during the problem sets. Be prepared to be frustrated at some points but in the end it will all be worth it.","It's hard, especially in the beginning, and really discouraging when you're like me and your psets are all suddenly at like 70-80% marks. It gets better but you have to spend a lot of time working with what you know and forcing it to work with what you don't know.","Take this with Prof Morrisett!  He's kind of a hard-a**, but I can't imagine the class with anyone else.","This class is a MUST TAKE for any student who is either going to concentrate in computer science or just wants to get a brief exposure to the subject.","The class is definitely hard, but the difficulty comes at only a few points in the year. There are only 7 problem sets or so, the tests are much more reasonable than those in CS50 (the final was only six questions), and the instructor is great. A couple problem sets (especially the last one) will kick your butt, so start those early.","I have a great sense of what constitutes elegant coding and exposure to a beautiful language, OCaml. You'll hear a lot of people telling you how terrible OCaml is, but it's actually really elegant and beautiful, so enjoy. You'll come out of CS51 a better coder if you use it to help you develop habits. The concepts here are useful not only for CS, but for anything that requires problem solving.","Take this class if you're interested in computer science. If CS50 was your first CS class, then I hope you've taken time to actually learn the material in 50, because 51 is more difficult, focused, and delves more deeply into CS applications.","This is a good course that will teach you a lot of different approaches to software design through functional programming. The course is very manageable if you're at least somewhat competent at programming. At times, however, the assignments could get tedious.","You'll get good at OCaml, I guess, and programming.","Don't take this course expecting something similar to CS50.","This class will definitely improve your computer science skills, but be prepared to do a lot of work.","The programming assignments are quite fun, with many nice and cute solutions. It's a pretty good introduction to programming and the general ideas therein.","Not worth taking at all lectures suck homework are hard and pointless and you learn nothing useful at all. Do not take this class.","Difficult, but rewarding","CS51 is necessary for absolutely anyone entering the field of computer science today. The professor is very forward thinking and gets you to actually use your brain. The class is mind-bending in all the right ways and takes a lot of hours, but each hour you put in, you WILL get something out. My favorite class all semester and makes me want to go more into CS!","Prepare to put in tens of hours every week to walk away with a superb understanding and your worst grade of the semester. No matter how much time you put in, it won't be enough. The staff doesn't care about you, and you will be compared to a monkey flinging its feces multiple times. Don't take this class unless you absolutely have to.","take if you're serious about coding. It breaks you down and then builds you back up again. But it hurts..... don't take with CS124.","CS51 will break you down and build you up. Also, it's harder than you think it is.","CS51 is really very good indeed. No, you will not be using Ocaml outside of the course, and no, this fact does not constitute a valid criticism of CS51. However, assignments are in some cases rough around the edges (for example, there was a multiple-day freakout over bugs in the RSA staff code this semester). \r\n\r\nThe exams are generally quite reasonable and are nicely written.\r\n\r\nFeedback is a disaster - don't expect useful feedback on your work. However, if you're the type of person who is introspective enough to self-evaluate and know when your code's good and when it sucks, this should not be much of a deterrent. If, on the other hand, you're a \"I'm just going to type a bunch of gibberish and say that it's good code that just needs to be debugged\" type, this is not the course for you. You will be called out on your BS. Despite this, it's a great course - I only wish I had started in 51 instead of 50.","NECESSARY if you are thinking about concentrating in CS. Will let you know whether or not you really want to concentrate in it (CS50 is kind of idyllic). Will teach you how to code better, Morrisett is a great lecturer.","Make sure you understood CS50. Make sure you like computer science and not just the atmosphere and free food that CS50 gives off. You actually have to think in this course, you can't just go to office hours and ask the tf to walk you through the pset. If you try to do that, you will be in for a rude awakening.","Great course and a must-take for anybody seriously considering any type of programming in the future, whether it's for a computer science job or just writing a script for a non-CS field.\r\nOcaml is a bit funky, but a great way to learn functional programming. Even though it's rarely used, functional programming is a really neat type of programming that requires a new way of approaching a problem, and forces you to actually think about the problem rather than just \"throwing shit at the screen\".\r\nIf you've already had extensive experience in programming in an object-oriented language (like Java), then most of the p-sets will be straightforward for you.","Go to class, go to section, go to office hours, start the problem sets early, and find out what you did wrong on the problem sets at office hours","CS51 is definitely an intro class - there's a lot of support and no one expects you to know functional programming going in.  It's more mathy than 50 (and for a lot of people this makes it more interesting\/fun).  You learn a lot of useful coding skills and OCaml actually makes recursive programming make sense.","It's a hard course, no doubt about it, but probably worth it.","Great class! Overall it teaches you how to program well and teaches you a different kind of programming which is functional programming. It is not an easy class, but still doable if you start your psets early (before the last day its due). You will learn how to test your code and make sure that what you're doing is right.","What you get out of this course will depend highly on what you are interested in pursuing. As an aspiring software engineer, the material covered in this course was valuable, even though the lectures and sections were not stellar at conveying it. The problem sets were very time-consuming, the most time-consuming problem sets I have ever done, and are enjoyable to those who are deeply interested in computer science. Thus, the course was ultimately rewarding. However, I find it hard for students to get engaged with the material and not fall behind if they do not plan on pursuing a CS-related field. Regardless, understand that this course is not like CS50 and is not tailored for the masses.","I really enjoyed CS51. I thought the psets took a little bit longer than those in CS50, but that they were less challenging overall. If you did well in CS50 you have the skills to do well in 51. Overall the class was a lot of fun and left me feeling much more confident in my ability to tackle large software projects than CS50 did.","This is a great class for getting deeper into CS. The workload is heavier than 50 so make sure you enjoy writing a lot of code. The design aspect of the course is very applicable to careers outside of school as well.","This class takes more time than you think it will!","Do not take this class if you just took 50 and expect to do the same type of coding. Expect to think a little, on your own, before you open your text editor. \r\nThat being said, I loved everything about this class.","Good class. Not too hard","Take this course if you want to understand what legitimate (clean, well-designed) programming looks like. Be prepared to be skewered by Greg if you don't catch on quickly enough that simply hacking it till it works is not an adequate approach. Basically, if you want to take your programming to at least a semi-competent level, take CS50++. (Also, if you don't get the ++ joke, then you should probably get your intro programming up to speed before CS51.)","This course is difficult, but a lot of the problems are interesting to solve rather than being tedious.","the course is not easy but it is essential to learn good programming techniques.","This class is (almost) worth taking to learn OCaml: functional programming is elegant and challenging and will be especially appreciated by those who have prior coding experience.  However, the professor is unnecessarily caustic and judgmental in his lectures, which are honestly not particularly informative, and the attempt to throw in object-oriented programming near the end was quite confusing.","Great teaching staff. Keep up with the lecture slides!","This class is awesome.  It forces you to think about computer programming in a different way which is hugely useful.","Take this class for your secondary or concentration because you definitely learn an appreciation for higher level CS and begin to understand how challenging it could really be. That being said, it is really really really frustrating and hard.","The psets are often frustratingly difficult and tedious.","This class is hard. Like real hard. Especially if (like me) you didn't have any experience with cs before cs50. Expect to spend an absurd amount of time working on the psets","Better than CS50 in every respect. Problem sets are both more interesting and easier. Exams are much shorter and more relevant (although quite tricky( Greg is great, so you should actually go to lecture, and stay awake through it. Group project can be kinda miserable... make sure you don't have a group where everyone has tons of other commitments.","Functional programming is almost certainly going to be an important skill to have, so I would highly recommend learning it in some form (especially if you are a cs concentrator). For that reason I would definitely recommend CS51. That said, I have some reservations with recommending the class.  If you already know Object Oriented programming, the second half of the lectures are not incredibly informative. In addition, the problem sets were almost entirely graded using automated tests. I ultimately felt like I learned a lot, but didn't have much support from the course.","Although this course can be challenging (more so than CS50), it is completely worthwhile. It teaches you the value of functional languages and makes you a better programmer.","This class is way better than CS50. In CS51 you will actually learn computer science skills that would be useful in a workplace environment. With that said, the CS department will eat up your week nights like you belong in a dark, cold box with the executives laughing it up in the penthouse sweet.","One of those rare introductory courses that does not underestimate its students. Most of the learning happens in the context of homework and final project, which will take more time you would normally assume. Also be prepared to do a serious amount of independent research on algorithms and methods for the final project, but the course staff will prove very helpful. I took this class without having taken CS50 and it can surely be done if you have programming experience. While not easy and kind of technical sometimes, the class is definitely worth it. You will actually learn to write efficient, elegant, scalable code.","Challenging class but it definitely helps you learn a lot. \r\nBe prepared for the project though and think about ideas during the year and build on them","This class is a huge, huge time commitment. That said, you learn a lot. Beware if you don't go to lecture, Greg hates that and is quite scary.","I enjoyed this a lot more than CS50 because I felt that the topics covered were interesting to think about and that the material was presented without unnecessary pizzazz.","Decent class. Psets can be long, much longer than CS50 psets, but are not particularly difficult to understand. Midterm and final were also reasonable.","This course to me was a lot of syntax bashing, and I feel that your time would be better spent teaching yourself oo programming and functional programming with java and haskell, as they would be much more useful to you in the future and you would learn the same things.","CS51 is awesome and so fundamental to any computer scientist. I almost didn't take it thinking that it would be \"too hard,\" but it is very accessible to anyone who is wiling to learn. It is WAY less bombastic than CS50 - you get straight to the material. Doesn't try to convince you CS is awesome - you realize it is awesome from doing the material. Great fun and super interesting. Loved doing the final project. Morisett is awesome - unfortunate he will not be teaching next year. Made me wish I was a CS concentrator. TAKE THIS CLASS.","This class is great for learning functional programming, but only take it if you're truly interested in the material.","Be ready to dispel all your notions about good programming, and revamp your style and thoughts about computer science.","CS50 was a lot of fun and very carefree. This course, CS51, however, is much more serious and (if possible) even more thought- and time-consuming. But as always, with more investment come greater rewards, and I have personally learned a lot from this class.","Do not take this class unless you are serious about programming. I'm serious. This is not fun like CS50. It will, however, make you a much better programmer. Unless you are willing to put aside 3 or more hours a day plus time on the weekends for this class, this class will break you. Basically, do not take this as an elective.","Heavy workload.  Good class though.","If you took CS50 and enjoyed it, try this class. However, it is very different and much more technical. You will be forced to learn at a much faster rate than in CS50, but if you enjoy computer science, then you should love all the work and frustration.","Just an extension of CS50, but less practical to people not doing CS. If you want to do any other CS courses you should definitely do this first.","Cool psets and material. Doesn't hang you up on syntax like other CS classes. I usually spent a weekend doing the psets. Definitely recommend.","This class is incredible. If you loved your super cool CS50 final project website, not necessarily the best course for you. If you think algorithms and abstractions are cool, definitely the class for you. The key to success in this class is time management! The problem sets are mostly broken into small, easily managed steps. However, you'll get screwed if you don't plan ahead and get stuck. The midterm was difficult but not time-pressured, Morisett is fantastic, and lecture can be dry but is overall interesting if you pay attention for the entirety of the lecture.","This class is not easy. It will probably require some time. Great class though, and teaches you to think in an abstract way.","If you are at all interested in computer science, especially as a concentration or as a secondary, please take this course. CS50 is not an adequate introduction. CS50 teaches you how to code; CS51 will teach you how to think and code WELL. CS51 will introduce you to a lot of new concepts and ideas you haven't seen in CS50 (for example, higher order functions, recursion, different data structures, good \"cs practices\") that you'll really appreciate as you do more computer science. Greg was great, and I got a lot of support from the TFs. That being said, you really have to know what you're doing because the course can move quickly, and the problem sets definitely take 10+ hours per week. Make sure you start early and budget enough time to complete all the work. The class was really tough the week before spring break, when we had a large pset due and a midterm in the same week, and during reading\/exam period, because the class had a project and a final exam. Be ready for the work that you'll be facing, and you'll have a very rewarding and enriching experience.","If you want to do well in this course, you better be prepared to do a LOT of work","Reasonable introduction to functional programming.\r\n\r\nThe treatment of object oriented programming is somewhat cursory.","Ocaml has really annoying syntax.  Wasted more time learning the syntax rather than the concepts of functional programming.  Could have been taught in a better format.","This class is better taught than CS50. All the material that you need to know he covers in lecture and the problem sets are closely tied to his lectures.","This course is difficult, but rewarding.","Problem sets take an insane amount of time, like most CS classes. Exams are unfair in testing what you know and will instead test how well you can read bad code. But, solid class in building a functional programming foundation.","This class is super intense. Take it with great care!","Functional programming is great! Be prepared to work harder, for more hours, and with fewer breaks (problem sets are due alongside midterm studying and the final project) than you did for CS50, but I'd say this class is better. We didn't see much of Morrisett's mean side, but the one good rant we got would have made the whole class worth it all by itself. Using OCaml, especially after you get past initial syntax problems, allows you to think about types, abstractions, and algorithms instead of low-level things like memory allocation.","It's really hard: a couple psets took on the order of 20 hours to complete. Interesting though.","Not a fun class at all, lectures aren't very helpful or exciting","If you took CS50, and you're at all considering doing CS or programming later , it's probably a good idea to take CS51. CS51 does a good job of building upon the basics to teach what actual programming requires and is like, a picture that CS50 does not give.","Main thing you learn in this class is to be more thorough with your coding and understand what you are doing before you try to hack away at the assignment. It is a good lesson to learn.","If you were very comfortable with CS50 or are very into Computer Science, this class is indicative of where you'll be going if you continue with CS.","It's hard but worthwhile and Morrisett is the man.","Amazing class. Definitely not CS50 because there's less of a support structure, but it's a good test to see whether computer science is right for you. GO TO CLASS. There's a high correlation between doing well in this class and actually attending it. Also, START PSETS EARLY. Start them by Monday if they're due Friday. You'll save yourself a lot of trouble.","Its really hard","CS51 is CS50++:  the material is not rushed but rather thought-provoking; the psets are more in depth and will push you to understand the course material. This course is difficult but manageable, time-consuming but rewarding and a must for any CS concentrators.","It's tough class, but OCAML is a pretty elegant language, and it'll get you to think about your code before writing it, which is a good habit to have.","CS51 is a difficult class, much harder than CS50, but I found it to be much more rewarding. You need to spend significant time on this class, but most of the material is quite useful. I actually really liked OCaml. It is a very elegant language.","CS51 is a computer science class for computer science-minded people.  Though the language used (OCaml) is not one you're likely to see again, it's very helpful for teaching the concepts of the class, which you will use again and again.  Both the problem sets and final project are quite rewarding.  Compared to CS50, much less time is devoted to debugging code, and much more time to design and understanding.  Overall this is a fantastic course that I highly recommend.","You'll learn a lot about writing clean code, and you'll learn a lot about how to code with others in such a way that you don't even need to see each other's code. Abstraction barriers are good. \r\n\r\nAs for the final project, it might be fun to learn a new language, for the entire semester is spent coding in OCaml (The Java component was removed). Google is very helpful in this pursuit, and you might just leave the class with a practical new skill (we learned Python for our project). Also, take the documentation for your final project seriously. I mean it. Get started on that early and make it pretty. We didn't, and we paid the price for it.\r\n\r\nBe prepared to devote a lot of time to the problem sets. Furthermore the lectures, after the halfway mark, often involved convoluted examples that drove many students in the room to visit Facebook and check their emails rather than pay attention. If you go home and re-read the slides it can make more sense though. \r\n\r\nNote that OCaml is VERY DIFFERENT FROM C. I never used a loop in any of my problem sets. Everything is recursion. It's a cool language though, and the solutions to problems often involve a lot more thinking than they do typing. OCaml code is generally much shorter than C code, and its type checker keeps you in line. You really have to think about what you are doing if you want to write good code in OCaml. Professor Morrisett emphasizes this.","SO much better than CS50. The lectures are engaging and useful. Even though you'll probably never use OCaml again, it's a perfect language for teaching recursion, functional programming, data structures, and many other valuable topics. You'll no longer be able to get full credit for simply having code that works, and that's a very good thing for anyone who actually wants to learn programming. 51 has an incredible team of TFs. They go above and beyond at office hours, often staying late and somehow managing hundreds of stressful students. This is a great course and not as hard as everyone says it is. Don't be fooled into thinking that taking CS50 alone is enough to learn how to program competently.\r\n\r\nSpeaking of TFs, Kevin Schmid is my favorite person ever. Without him, half the class would be failing. He will do anything to help anyone in the course. His office hours are officially 2 hours, but he'll end up staying for 6 or 7. Make sure you thank him when he saves your grade for the 10th time!","Think carefully before taking this class. It is a lot of time commitment: problem sets can be brutally time-intensive, difficult to get help on (go to Office Hours definitely) and there's a lot (especially in the beginning, syntax) to go over. Consider what you want to get out of it (think about why you want to learn Ocaml and functional programming in general; they can be good things to learn but think about why you want to learn it).","Be prepared to work until your eyes bleed.","This class is not CS50. Don't expect fun hackathons or music videos or crazy office hours in Annenberg. That said, if you think CS is the place for you after taking CS50, this is the class to take. IT IS A MUST! The class is extremely polarizing. Either you will love it or hate it, but regardless, it will help you find out if CS is really the place for you. You can hate the class and still love the subject matter but you'll know if you really like CS and programming. This class will most likely kick your ass but the support team is incredibly helpful. They really want to help you succeed and you will do well if you stay on top of the material and start your psets early. But actually, start psets early and really plan out what you need to do before you even touch a computer. That's the best advice I can give you.","If you're prepared to put in a lot of work, this is a great way to better your programming thinking and skills!","This class is EXTREMELY difficult for those who came in with CS50 as their ONLY background for cs. Be prepared to spend hours upon hours on psets. I will say though that I learned A LOT, and it is worth taking if you're schedule can accomodate the extra hours of work.","While the course is definitely useful for those in a Computer Science (or maybe engineering) concentration, I'm not sure what you'd get out of it otherwise. It's not as generally accessible as CS 50 was, though if you like problem sets as difficult puzzles and have the time then go ahead and take it.","This course changed my perspective on CS. I enjoyed learning about the different paradigms of coding and how each has its own advantages and disadvantages. The course is very time consuming, but I thought it was totally worth it in the end. Just make sure to start the psets (at least) a few days before they are due.","A much better class than CS50, this course is just challenging enough to keep you on your toes but manageable in a way that ensures you don't completely fall behind. An excellent gateway into more advanced CS courses down the line","Must FoR All Cs Majors And Minors","The material is awesome (though OCaml is kind of useless), and the class was solid overall. Professor Morrisett can be a bit pretentious, but he's a good lecturer so deal with it. Much harder than 50, though, so be sure you're comfortable thinking programmatically.","This is an extremely interesting class with useful concepts for actual programming. You'll learn a lot about how to code well. However, the problem sets are long and some of the concepts are unclear. This class takes a lot of work.","CS51 is an eye-opening class and really teaches you various very important concepts in programming. It focuses a lot on coding style and understanding of concurrency. The assignments are also very intensive but interesting. I would recommend this course for anyone who continues to be interested in computer science after CS50.","Grading and expectations are not as clear as they are in CS50, and unlike what many people mention, I never really fell in love with OCaml. However, functional programming is a good topic to understand overall and you will become much better at recursion and go into greater depth with topics touched on briefly by CS50.","A decent class, but be aware that there aren't many resources online for Ocaml, the relatively obscure functional programming language we use in this class.","This class is more challenging than you'd expect, but it is also very rewarding. This class will turn you into a GOOD programmer, regardless of your background.","Make sure you lay aside significant time for psets. Do NOT start the later psets the day before they are due.","I found this class way more difficult than CS50, especially the exams.  The concepts taught in 51 are more of what core CS is about than 50, and I'd say 51 is somewhat of a weeder class, so be aware that it might be a completely different experience for you than 50 was, but by the end you should have a better sense of whether CS interests you or not.","Even if you found CS50 easy, you may not find that CS51 comes so naturally. The grade of competition increases greatly, as many of your peers in CS50 will have never had coding experience, but mostly everyone taking CS51 is somebody who succeeded in CS50.","Take CS50 seriously!","Good introduction to functional programming and better style.  Also, an excellent transition to larger scale programs if you're coming from CS50.","Start psets early. Start studying early. Be prepared to invest time in this. Don't take CS124 concurrently.","This is a challenging but interesting course. CS50 teaches you how to program; CS51 teaches you how to program WELL. It turns out that the latter is much harder than the former, but CS51 will push you well along the way. The Psets are challenging but always interesting, and Morrisett will help you reshape your mental paradigms of programming.","I breezed through CS50 and stumbled, HARD, through 51. Know that this is a possibility. This course is designed to make you rethink how you approach programming and as such, nearly everyone feels off-balance at some point in the semester. Knowing that would've been really helpful for me, as I just felt like I was struggling and everyone else was doing fine (definitely not true. facades, man.) The redeeming quality of this class for me was the caring, wonderful, amazing TFs.\r\n\r\nAlso: in a class that emphasizes elegant design etc so much -- please take a look at the problem sets you're assigning us and think about whether you're okay with being that big of a hypocrite. Thanks.","Fantastic class. Teaches you to think an entirely new way- that goes along with functional programming. The psets were significantly cut down from previous years, so it's totally doable now with only CS50 as background, and it doesn't take up too much time.","This course was very good and I learned a lot. The assignments take a while but are not impossible and often pretty fun. The exams were pretty hard I thought and required studying. If you do very well on the exams it shows that you really understand everything deeply I think.","I took this as my \"fifth\" class, the only one not relevant to a concentration and in many ways the least interesting to me. This was a mistake: C.S. 51 is designed to be the centerpiece of one's schedule, and I was left with the irony of putting 70% of my work into my least important course. That said, the class is fantastic. It is intense: be prepared to be broken down and built back up, and to spend ten or more hours on a given problem set, but it is immensely rewarding. If 50 teaches you how to code, 51 teaches you how to code well.","CS51 is a class in which you will be exposed to many beautiful concepts and a beautiful language, OCaml. It can be tough, and the administrative structure of the course is not nearly as polished as that of CS50. But it's still a worthwhile and fascinating course.","Anyone with any sort of interest in CS should take this course. Functional programming and OCaml are beautiful, and there's a certain aesthetic appeal you get from writing code in this course you don't get in CS50. The final project is a lot of fun if you put work in, and you come out of CS51 amazed at what you can do after just one semester (I implemented a facial recognition algorithm that detects whether the webcam is seeing a face or not... how cool is that??). Great course, would definitely recommend.","Start psets early. Although Morrisett makes a big deal about it, you don't have to go to lecture. His lectures are interesting surely, but it's easy to get lost if you're new to this whole computer science thing like me. He often (towards the first half of the course) failed to explain things fundamentally enough for me to understand them in real time, hence re-watching lectures online turned into only watching the lectures online.","This class is a must take for anyone who wants to take their programming and knowledge of computer science to the next level. Although I never took CS50, I found that having a lot of programming background made me appreciate this class all the more. I definitely feel there is a lot to gain from this class, and it is up to the student to really control how much they want to reap from it. One can just simply complete the p-sets, but I found that there are lots of theoretical and technical experiences that a student can put under their belt during this class if you go the extra mile, especially for the extra challenges. I definitely would say though that I observed some of my peers who had just come in from CS50 take this, and it seemed they struggled with some concepts.","more difficulty, more knowledge, more late nights, more epicness, more tears of frustration, more tears of triumph: in every sense, 51 > 50.","It's hard but doable.  This is real CS and it will absolutely change the way you think.  I had much better friends in psetting than in CS50 in part because you'll see the same people at office hours.  The TFs this year were all phenomenal.  I can see the traits that might cause some people to not like Greg, but I thought he was great.\r\n\r\nAlso, in the first two weeks of class, make sure someone tells you the \"trick\" of recursion.  Once you see it, it gets muuuuuuch easier, but if you try to work it completely out in your mind you'll get stuck in an infinite loop.","The psets are a lot of work, but also quite fun! I did not take CS50, but managed to get by (though the midterm was definitely difficult). Section notes are very useful, perhaps more useful than lecture!","Prepare to spend a lot of time for this course. Psets, project, etc.","If you want to learn how to think, not just just about computer science, but problems in general, take this class. It's a lot of work but it is incredibly rewarding, and it makes your smarter."]},"Spring '14":{"comments":["I don't know how much I actually get out of the class. It does give me some programming maturity but after all Ocaml is a useless language unless you want to work for jane street. If you feel you are good at CS and good at picking up things on your own, skipping the class may not be a bad idea.","CS51 teaches you some very important and core concepts to programming. This course helps you to become a better programmer, and this is undeniable. The assignments were good overall (a few psets were not very well written but for the most part it was solid) and the final project was exciting. This semester, transparency on grading was pretty unclear, which made the course unnecessarily difficult for students. Students didn't get their pset results until many weeks after, which negatively contributes to their current pset grades since students don't know what points\/areas they are missing and need to improve on until it's already too late. Hopefully, the teaching staff can fix this for next year's students. Overall, I enjoyed the course, learned some tangible skills, and am looking forward to taking more CS courses soon.","This class has been my favorite at Harvard so far. All of the decorations and trimming that made CS50 so fun are taken away, but that's not necessarily a bad thing. This class is meant to show you that CS means business, and it will demand a lot. You'll spend many hours a week on psets. But that's the point of the concentration; it expects a lot of its students. I have heard that this year's class was made a lot more manageable than last year, and after talking to my roommates who took it last year I would say that I agree. At no point this semester, despite the heavy workload, did I feel overwhelmed. You will learn a lot lot lot from the psets and from going to section. Lecture can be a little convoluted, and office hours are very busy so go early in the week. This is all nitpicking though; I had a great time in this class.","It's fun, especially the problem sets, and OCaml is a great language!","The lectures were fairly boring and unhelpful, but the sections were great. You learn a lot from the problem sets. Also, I don't care what other people say, I think OCAML is a beautiful language. You'll probably never use it again though.","This course is hard.  Make sure you are a really strong programmer beyond CS50 level.","Take it if you're planning to concentrate in CS. I would think twice about taking it as an elective -- for me, Ocaml seems like it's not that helpful to learn just for the sake of learning.","This is a good class, but OCaml can be frustrating at times. There is a bit of a learning curve at first but once you get the hang of it you actually learn some cool class. It is definitely tough at times and very time consuming, but it will make you a better programmer.","It's a good course and takes a lot of time but teaches you more abstract ways of approaching computer science problems.","This class is a ton of work. The homework assignments take forever to complete. At the end of the class you definitely have learned a lot, can approach coding in a much more organized way, and can think about problems in a better way, but getting there is really annoying if you have a lot of other things going on.","Not particularly useful if you have a lot of coding background, but for people going from CS50 who started CS in college, it is very helpful. Start the psets early, before Thursday as Thursday OH are always very crowded.","This class teaches you a LOT about writing effective, concise, and tested code. While I entered a class with a basic idea of concepts like modularization and recursion, I came about much more aware of how powerful they are and why functional programming is becoming increasingly popular. There are a lot of reasons to hate OCaml - believe me - but by the end of it, I found it so applicable that switching my mindset to Python (the opposite of a strongly-typed, functional language) proved way more difficult than expected. I think knowing how to program functionally is a great skill. The midterms and psets are generally pretty difficult, but if you have a good partner, it's all manageable. Overall, highly recommend it, although I haven't taken 61 (doing it in the fall!), so I'll have to see how it compares.","Good introduction to functional programming","This class is a disaster. Do not take it unless you actually have to. The grading is literally nonexistent. We were already working on the 5th problem set before we got any grades back for the first one. The lectures are ridiculously boring. Professor Tov should not be teaching. This is the most disorganized class I have ever taken. Just don't take it. For your sanity.","It's much better paced than CS50, and as a result feels much easier (lectures and problem sets actually built off of one another)! However, if you actually want to learn about algorithms take CS124.","Please for the love of Tov let someone else teach this class. The material is fantastic and I actually learnt real coding skills to complement the introduction that was CS50, but Jesus, bleeding Tov was a huge buzzkill","The difference I noticed between this class and CS50 in terms of the workload was that 50 gives you one large problem to solve that you scramble and stress over for the entire week, while 51 gives you many smaller, self contained problems that occasionally amount to something interesting. This made the problem sets a lot more enjoyable and less stressful. \r\nThey say that this course is the make or break CS class, and in my case it definitely made me know that I will be declaring CS next winter. It provides a great introduction to higher level programming concepts, gave me the ability to appreciate them. Specifically, abstraction is mind-blowing, functional programming is beautiful, and object oriented programming is really fun. If these things do not sound appealing, however, do not take this class.","This year, the class was an absolute logistical nightmare. Sections and lectures were not worth going to, as the lecture and section notes were freely available online. It is a difficult course, but one could teach it to oneself quite easily. The proper teacher should be back next year, so it should be better.","This class will teach you to code better, but keep in mind that you will need to put in a considerable amount of time and effort. You truly get out what you put in to this class. If Jesse Tov is lecturing, don't bother going, but definitely go to section, as this is where most of the learning will occur.","This course is a good introduction to computer science - take it instead of CS 50 if you want such an introduction. CS 50 is definitely not a prerequisite, and CS 51 fairly well identifies the parts of coding that are helpful for people to learn. In terms of negatives, there were a number of logistical issues this year (as is the nature of all large courses), and there probably will be next year, too. If you're willing to put up with these (they aren't that bad), then this course is definitely worth taking.\r\n\r\nAlso, students who want to take this class should preferably not be too afraid of math - not because you do a lot of math in the class (you don't), but because much of the thinking in CS 51 (in functional programming, really) is more similar to mathematical thinking than the CS-50-programming kind of thinking. If you're a bit worried about this, CS 51 will probably still be fine, but you may find it a bit more difficult.","This class was definitely more conceptually difficult than CS 50, but seemed worth taking. I learned a lot about functional programming and abstraction, and the problem sets forced me to think a lot harder than I did in CS 50. That being said, it's not overwhelmingly hard or extremely time-consuming, and I thought it was manageable.\r\n\r\nDr. Tov seemed to be a very controversial lecturer. I honestly thought he was fine, and his lectures seemed to convey concepts understandably (for the most part) and precisely. However, others seemed to disagree, and I may be in the minority here.\r\n\r\nThe one main issue I had with the course was that I'm not entirely sure what I learned, at a broad level. For instance, I learned a lot about specific syntactic and structural features of OCaml, but I still don't know why those things matter more generally.","Great class and certainly worth taking. Not too conceptually hard but there is a fair amount of work. If you like doing it, it goes by quickly but if you are not keen on CS it could be a pain.","I do think that everybody who wants to do CS to some extent should learn the material from this class. Students who are not that into web programming and have some level of mathematical sophistication should not be afraid of skipping CS50 and jumping straight into CS51 - understanding of logic is more important than tons of previous experience (and you really do not need to know C for this class). That being said, this is a big course and because of this it has logistical issues. It was not my favourite course, but I am quite sure that I enjoyed it much more than I would have enjoyed CS50 and it did teach me a couple of new things. This is not a \"let's put on a big show and teach kids to make their own webpage\" class, this is an actual beginner-level computer science class, and because of this I am \"likely to recommend\" it.","Honestly, Tov was an awful lecturer. Awful. I stopped going to lecture and started watching videos, and often found that I understood things less after watching the videos than I did before.\r\n\r\nAt the same time, I recommend this class with enthusiasm. I loved the material - even problem set 1 was really interesting. I think it's a great introduction to higher level programming, and the final project you will build will be much more rewarding than your CS50 project. It's really powerful to learn an alternate PARADIGM instead of just an alternate language, which is why functional programming is so fun to learn.","This class was one of the most intellectually challenging courses I have taken at Harvard. I put in hours of work each week, will not get an A, and I do not regret taking it at all. I hope the teaching staff gets a bit organized in the future and that the lectures become a bit more engaging, but I felt I learned a lot and thought a lot as a direct result of this course.","You can get what this class teaches by reading 4-5 chapters in any programming book. If you're totally clueless with computers, then take it so you can be introduced, but if you at all know what you're doing, don't waste your time.","This course was seriously understaffed - we never got psets or feedback back on time (sometimes 6 weeks late). The course material was hard but there were not enough TFs at office hours - long waiting times. They also changed the nature of the exam to a new format which was really odd.","The problem sets really made me think and I think you will feel good when you complete them. OCaml is such an elegant language that I am sure you will come to appreciate.","This class provides a lot less support and resources than CS50, so you'll have to take the initiative to find the assistance you need. For example, most problem sets were not returned until weeks after they were due. If you waited until then to figure out a concept you didn't quite understand, you'll already be very behind in the course.","This was a really great CS class that I highly recommend to any CS concentrators or those seeking a secondary.  The concepts are well taught and the problem sets engage with you to really learn the material.  Grading was fair and while the first midterm was great, the second midterm (all true\/false) was in my opinion a terrible way to test us.  The problem sets were very well done and really reinforced the material in lecture without being too difficult (however, some were time consuming)","In my opinion, this class is a crucial step between CS50 and future, more intensive CS courses.","Take this class if you want to become very proficient in OCAML, understand data structures, and slightly expand conceptual knowledge from CS50. But don't take it if not willing to put many many many hours to psets.","Only take this class if you're really interested in computer science. If you're expecting something like CS50, CS51 is much harder and is much less of an \"intro\" class.","I would definitely encourage students of all programming backgrounds to take this course because it teaches you a new way of thinking about coding (i.e. functionally), which is super interesting. OCaml is also a great language. I would also say that potentially some people with CS background should consider not taking CS 50 and just taking CS 51.","CS51 is leaps and bounds better than CS50 if you already have programming experience. It's still manageable, and the problem sets are more interesting. The lectures are just as dull, which sucks. OCaml is an awesome language, and it's not something most programmers are exposed to so early on in their CS studies, but it's definitely worth it. \r\n\r\nSocially, CS51 sucks. You're very unlikely to meet new people in this course. I mean, you'll probably never go to lecture, and neither will anybody else. The only way to really get to know someone is to work with them on problem sets, but I know what you'll end up doing - you'll just work with that buddy you made in CS50 again, and poof, no new friends just like you're Drake or something. C'mon man, reach out and TOUCH SOMEBODY.\r\n\r\nIf you thought CS50 was hard or too demanding, or you relied on your TFs to get you through it... good luck, dawg.","The psets are by far the hardest part of this course. Tests were not that difficult. Second one was all true and false. The psets though, dominated the week, even working with a partner, which you do for almost all of them.","Very poorly taught. The TFs are highly unprofessional. Honestly, I felt like a handful of them needed to be taught by some of the students. Quite sad that Harvard couldn't find better people to have such crucial tasks.\r\n\r\nUnless new people are put in charge (other than Ben, he was definitely good), I wouldn't take this class.\r\n\r\nAlso, whoever made the second midterm can definitely go away, as well. Unacceptable.","This course will tell you whether you like computer science enough to pursue more classes in it. The amount of work and energy you have to put into this course are substantial, and by the end, you will be very clear on whether you think programming is worth all the effort. For me, I found that computer science is not my thing. Many other people found that it was. Definitely take this class to find out if you're on the fence.","I'd never taken a formal CS course, so I thought it would be a good idea to start with CS51. I wasn't disappointed; my coding skills surely improved. However, if you're looking for a course with immediate usability, look elsewhere. OCaml is not exactly a widely used language.","CS51 is difficult and time consuming, in addition to impractical\u00e2\u20ac\u201dbut it does teach you how to think analytically and logically.","It will be unengaging if Tov teaches like he did our year. Take 61","This class is well designed, and comes along with a sizeable workload. You'll fully master recursive programming by the time the course is over, and your overall programming abilities will definitely be improved. The tf were extremely helpful on piazza, but were atrocious at returning assignments on times. At one point, we went a month and a half without receiving a single piece of graded work.","I felt the class was most likely very different this year from past years, since Morrisett, the usual instructor, left. There were a lot of various other course changes such as a larger number of partner psets, restructured midterm formats (all were open book this year), and no final. Overall, the changes made the class easier than before in my opinion. The class was almost completely organized by the Teaching Fellows and Preceptor. That being said, the TFs\/preceptor are extremely helpful, and many would spend extra hours helping students with psets or preparing for midterms. Psets generally take a long time, especially if you don't seek help. I would definitely go to office hours and use Piazza to search for similar questions or ask new ones. In contrast to the CS50 psets, I felt the type of problems on the CS51 psets made it more possible for TFs to help you, so office hours were more useful. Having a good partner is also important!","Not at all like CS50, and I mean that in the best way. Lectures aren't gimmicky at all, and while OCaml might seem weird\/tricky at first, it's a really beautiful language. The psets are definitely harder - learning functional programming and recursion requires a lot of abstract thinking, and there's an emphasis on finding the BEST solution rather than finding A solution - but as a result they're much more rewarding. A great class!","Unless you're pretty confident with CS, I would recommend searching for another CS course. They don't hold your hand, like in CS50. Profs are also pretty ineffective.","This class is a really good foundational class. Yes the psets are hard and the tests are equally difficult, but if you find a group early on in the semester and put in the effort (work every day for a few hours on the psets) then you should be fine. I liked this class a lot more than CS50, because it cut through the weird pretentious \"trendy front\" that CS50 set, and just teaches.","Though CS50 attracts lots of praise, CS51 definitely trumps CS50 in all respects.  The psets are more fun, the lectures more engaging, and the skills more applicable.  This may also be due to the fact that the course was restructured this year; not having a final exam is an invaluable asset.  Unless you have experience programming in high school, you should definitely take CS50 prior.  Psets still take 8-15 hours per week, though.","While this class is definitely more difficult than CS50, I think it really makes all the work worth it. You learn a lot more that really gives you power to make interesting programs. Lectures are not that exciting, but they're definitely informative. Problem sets are pretty time intensive (at least 10 hours a week but often much more), so make sure that you have an easier class to offset this workload.","This class is tough. However, you will leave feeling like you actually learned something.","Class has interesting psets and very helpful teaching staff. Lectures were also pretty clear.","Be careful about who is teaching it and be prepared to be unnecessarily confused","If you enjoyed CS50, you will most likely enjoy 51 even more. I thought the teaching staff this year was excellent","Coming to this course after having taken CS61, I was somewhat disappointed by the quality of instruction. The lectures were hard to follow, confusing, and not all that helpful. The assignments and this course as a whole is much easier than CS61, though. Section was great; I learned everything I did in this course from section.","CS51 is a great follow up to 50. Ocaml might seem like a weird language at first, but you really learn to love some of its features by the end of the course and the techniques you learn help you become a better programmer.","requires a lot of effort, but worth the time","If Jesse is not teaching then you should take it. Otherwise you won't get much out of the lectures, so be prepared.","This class will probably make you smarter, so take it.","CS51 does not have very interesting lectures and most of what you learn in the class will be from problem sets and section.","This is a great course as a follow up to CS 50. My coding and understanding of CS have improve dramatically. The course was a little disorganized this year, but the material alone is worth taking the course. And OCaml is actually pretty cool.","The class teaches you a lot about how to code well and why something is good practice. As such, the course really left me with a feeling that I KNOW what good code should look like and how I can pursue that in further CS classes.","This is a great course to take for the first like three weeks to see if you'll like it. If you're interested in the language, then definitely take it, because it only gets more interesting from there on. If you absolutely can't stand OCaml, don't take this, because it will be very painful for you.","It's a really solid class to learn about OCaml and functional programming. It covers a lot of really useful concepts, and I felt like I became a better programmer by the end. However, I wasn't a fan of Tov's lectures. It's hard to engage yourself, but if you don't, it will hurt you for the midterms.","As per usual with the Harvard CS department, be prepared to teach yourself, struggle by yourself, and fail by yourself. There are too many students, too few TFs, and too few hours in the day to complete your assignments. If you go to office hours, be prepared to wait in a 2-hour line to get 5 minutes of help. This class has confirmed my suspicion that the extension school is ruining classes for the real Harvard students. Half of the TFs are dedicated to the extension school, so they can have online office hours in their rooms without having to help anyone. Due to this unfairness, there are usually 2 terrific TFs at office hours, surrounded by 100+ students, and they can't possibly help everyone. It is survival of the fittest, and if this was natural selection, most of us would be going extinct (myself included). I am very passionate about CS, so I am sad to see the quality of this class deteriorating.","You'll learn a ton in CS51 without realizing it, up until you use what you learned on the final project, at which point you see how it was useful. The most important part of the course is finding a good partner to work on problem sets with (good meaning capable at CS and also easy to coordinate with). Make sure, though, that you're still learning all of the material while you're working with a partner. It's easy to just let your partner do all of the hard stuff.","It's a somewhat challenging course, but it's definitely worth taking if you're interested in programming at all!","Solid class. My only issue was with the significant delay in getting problem sets returned which hurt an otherwise fun and challenging introduction to functional programming.","Morrisett didn't teach this year and the class suffered as a result: lectures were confusing and hard to follow, a lot of small things needed on problem sets were never even mentioned in lecture, and OCaml is a black hole of mischief that detracts from the course. Java should be used since it's about 2^32 times more relevant in the world of Computer Science. The TFs did a good job though.","It teaches you OCaml... And little else.","This course will eat up your life, especially the few nights before problem sets are due. In fairness, you learn a lot, especially because most of the psets require you to have a partner so that you're forced to look at how other people code. But be prepared to dedicate a lot of time to it. Lectures, at least this year with Dr. Tov instead of Prof. Morrisett, were rather unstructured and unhelpful to the problem sets or midterms; most of the learning came from doing the problem sets, which is part of why they take so long.","This class will make you appreciate functional programming, and that is a topic you might never see again as a CS student.","Great class, but the feedback on assignments was often very delayed.","CS51 is a tough class with extremely long psets.\r\nBe prepared for a typical CS class: you won't learn that much in lecture that will be useful for the psets; you'll hope you get a good TF who helps you prepare for the psets in section; you'll hope you have smart friends who can help you through the psets; and you'll have to study random stuff for the mditerms that doesn't really have too much to do with what you actually learned.","The class is an ok intro class, much better than 50 and sometimes pretty interesting. Functional programming is cool, and it can be pretty sexy. By the way, the tf\/staff this year did a really great job--their piazza responses were dead on time, (slight hiccup in grading, but no big deal), and super accommodating. Just a great group of people.","Functional programming is definitely worth learning, and this class is helpful toward that goal. I do think, though, that some of the time spent in class is not used very efficiently.","A great class for those that are interested in improving their coding abilities. It does more than just expand your syntactic knowledge, as you are also introduced to skills that are essential to succeeding as a programmer in the real world.","This was an interesting class. It was great coming into the class knowing nothing about OCaml or functional programming and accomplish some really impressive things over the course of the semester. That being said, the psets mainly consisted of a lot of elaborate code written by the teaching staff, which we were supposed to add to\/edit. Although the code written by the staff gave us a nice head start so we could accomplish some pretty cool things, it also severely limited the extent to which we could be creative with our solutions because we had to conform to the code already written. I would have rather had more freedom in my programming, even if it meant my end results for the psets were less impressive. The final project was great for having freedom. While Jesse's constant examples during class were helpful, it would have been better to have some kind of more structured curriculum, perhaps with a textbook. My biggest complaint is that office hours were a complete madhouse, especially on Thursday nights. Over 50 students would be in line to talk to one of three TF's, which meant it could take over an hour for a TF to come to you, by which time you're likely in a completely different part of the pset than when you got in line. Something definitely needs to be done about that next year. Grading of some of the psets was unbearably slow. I think it took the teaching staff over a month and a half to get one of the psets back to us. Also, Rob is the best and if you go to his section you'll do better than the students in the other sections.","Easy, interesting class. Learning the new functional programming paradigm was useful and enlightening - it really opened up a new and quite intriguing side of programming.","Take it. The tools you learn will be invaluable in later CS courses.","Take 61 instead.","It's a lot of work. Balance this class with easier classes.","Morrisett seemed like a very charismatic lecturer compared to Tov. I would have liked to take the class with him. Nevertheless, section\/problem set material was about the same, so I feel like I still learned the material, which is useful to know for any CS concentrator or student with interests in CS.  A little knowledge of functional programming might help, because at least this year, they threw us in (and threw Emacs at us too) without any help, and it took a lot of struggling to get off the ground at first.","If Professor Tov is still teaching the course, don't expect much from lectures. The class is otherwise reasonable. Problem sets are interesting enough, and instructive enough that lectures aren't necessary to your understanding of the material. Later problem sets can become pretty time consuming, and negotiating time expenditure for partner psets did become a little complicated, but it worked out in the end. Midterm exams are pretty fair in terms of difficulty level. The course isn't super painful - the material is pretty accessible, and the TFs can help explain any concepts that weren't conveyed clearly in lecture. Still, there were moments throughout the semester - maybe a particularly dull lecture or a time consuming pset during a hectic weak - where the course seemed extremely frustrating.","Working through the problem sets is actually pretty fun, though strugglesome.  You should take it if you can put in the time!","Really fun problem sets, you learn a ton. In a completely different league from CS50 in terms of difficulty so don't underestimate it even if you breezed through 50. Lectures aren't particularly entertaining and teaching staff were good but pretty disorganized this semester so watch out for that. Go to section and do the psets early.","This is a solid CS course. Functional programming is great, and it's good at teaching it.","This is a great class, however Jesse Tov isn't a great teacher, so only take it when the other teacher is teaching it","Prepare to spend all of your time doing this class. It has easily been the toughest class I've taken here at harvard and required the most time. I would spend double the amount of time I spent on cs50 psets and would still end up getting stuff wrong on psets. Tests were reasonable, but the psets usually took around 15-20 hours. There were a few weeks with no psets which was great, but the class also 15 hour psets due both exam weeks.","Lectures are very very boring and pretty useless--Tov just stands at the front of the class and codes on the projector. Assignments are rough, but I learned a lot from doing them.  Manage your time wisely.","This is a great class.  Coming from someone who didn't like CS50, this class really turned me back on to Computer Science (now a concentrator).  The psets are really interesting and you do some pretty cool stuff.  In regards to partners, MAKE SURE YOU PICK A GOOD PARTNER.  It can be really frustrating if you guys have different schedules and\/or you have to do most of the work.  Other than that though, it's really an awesome course.  Lots of time, but definitely worth it.","Pretty similar to CS50, but without the frills. A somewhat inefficient way to learn, but plenty of support if you need it.","Watching the lectures for this class on YouTube in 2x is the way to go, as with most CS classes. Give yourself plenty of time (and make sure you have partners for certain problem sets) and the homework is not too challenging. There's more emphasis than you'd expect on theory and data structures, which is great preparation for future courses like CS124 but not very interesting. Overall, it's a requirement you'll have to get done if you're a CS concentrator so you might as well make the best of it. For those expecting another CS50, welcome to the real world. If you don't like this class or find it too difficult, then rethink being a CS concentrator.","very hard need to build your schedule around it with other easy classes to balance it out","Like many people have said, CS50 teaches you what programming is; CS51 teaches you how to program. It is an introductory course that covers more of the topics that are pertaining to problems programmers deal with on a day-to-day basis. And for that, I really appreciate the class. On the other hand, like some people, many people did not understand why there was a need for the programming language to be OCaml. OCaml wasn't bad, but many people did not find it to be practically useful, other than this class, and I totally agree. \r\n\r\nIn terms of the lectures, I didn't attend them. The lecturer was frustratingly slow, in my opinion, and I often get out of lectures (for the times I did go) less excited to work on my psets than before. Whenever I did go, I was actually just working on my pset in class because I did not find much use in them. \r\n\r\nSections, on the other hand, were drastically helpful. Even though I did not go, I realized towards the end how great they were. They solidified much of the content we covered in the week, and they give out REALLY good handouts for your midterms (yes, midterms are open note, but I'm not sure if it'll be different next year). \r\n\r\nOverall, I enjoyed the class more than CS50. Though the lectures were less entertaining and enthusiastic (in my opinion), I really liked the content because it gave me a better impression on what computer science and programming really means.","Useful in the sense that you get a lot of programming practice, but lectures weren't the most compelling. Take it if you want to become better at CS, not if you want to like it more.","Take it, you'll learn to think a lot!","If Tov is still teaching this class don't bother going to lecture and pray you have a good TF.","This course is a lot of fun to take, especially if many of your friends are in it. Coding is fun! It's also nice to be forced to write extensively in one language, so that you only have to check the documentation every other line. Unlike most of the students taking this course, I actually really like Ocaml. However, I don't feel I learned much in the class. Lectures were generally a waste of time. Although having to implement algorithms, classes, pointers, etc. was probably healthy for me, I'm not as independent a coder as I hoped I would be by the end. Because all of the assignments are templates, you only see in passing examples of good \"design,\" and never actually have to design anything from scratch yourself.","It is important to know other people who are also taking the class. If you don't know anybody, make some new friends. Having somebody to take the class with can help a lot with understanding the material. The later problem sets will also allow partner collaboration.","This is a hard class.  Make sure you have a partner with whom you can do your problem sets, as trying to do them alone is incredibly hard unless you have a very strong programming background beforehand.","Such codes. Much OCaml.","great class, very useful.\r\nocaml rocks","You should absolutely take this class. I felt like CS50 gets you really excited about cs, which is great but I didn't learn that much. You learn a great deal in cs51, the material is fascinating and it makes you more confident in your coding abilities.","Start the problem sets early","learn stupid ocaml but also useful recursion. concepts are good. class is class.","Easier in 2014 (more late days, more partner psets, no final). Hard work on problem sets but midterms weren't too bad. Final Project interesting. Watch lectures online.","know that you can take cs61 instead in the fall","It's a good class.  The material is very cool, and I came out genuinely liking OCaml.  That said, it moves a bit slow sometimes and some of the psets are more tedious than hard.","This is a solid computer science. I enjoyed it so much more than CS50 due to the depth of the material and the organization of the class in general.","It's a good course overall.","CS51 is definitely the next step after CS50. Its much more like what I've been told other courses in the department are like and its definitely a good introduction to what more advanced CS courses will be like","Be ready to put in a lot of work into this course.","Take this class if you have a genuine interest in computer science. As they say, this is NOT CS50.","The material in this class is so interesting and ocaml is an amazing language. It is a great way to get introduced to a different (perhaps superior) type  of programming (functional programming). The lectures at times were conducted in such a monotonous fashion that it was very difficult to pay attention. Variable names and syntax were used in a very cryptic way during lectures and sections were pretty useless. The exams were not tricky, but having a  30 question true or false exam for the second midterm? Seriously? A lot of the times this class had organizational problems, especially with grading and some of the less than helpful responses on piazza. However, you do learn very important topics so I would recommend taking this class.","If Jesse Tov is teaching this class, DO NOT TAKE IT. If Morissett is, (I watched his lectures from last year), TAKE IT!","This course is a waste of your time--if given the option, definitely skip to CS61 or CS121\/CS124\/CS125 (the former if looking for a more \"applied\" course and the latter for more theoretical courses). This course attempts to teach functional programming through an obscure language called OCaml in an attempt to give everyone an even playing field (notice the liberal use of the word \"attempt\"...). While it gets the basic idea of functional programming across, the course is misguided from the beginning--OCaml is a language you will likely forget immediately after this course as it is used almost no where in industry (other than Jane Street), PSETs are long and boring, and graded feedback takes literally months to get back. Lectures are long and boring (which will hopefully change with Professor Morisett's return, whom I hear is good), and practically everyone skips. Like you should. Into CS61.","Work on your psets early. Go to office hours. Ask TF's questions (email them, stay after section, etc) if you don't understand anything. For the psets that allow partner, choose someone who is at the same level as you in term of programming. If there is no one, do it alone because you learn from doing psets.","Take it only if you really like functional programming and OCaml. Be prepared to spend many late nights doing the PSETs.","It is a lot of work, but in the end it is totally worth it. Before entering the class I knew next to nothing about recursion and its uses. Upon completing the course I can honestly say that my understanding of CS concepts and my approach to problem-solving has changed for the better!","If you're just trying to get some secondary credit, there are other CS courses to take.  Sometimes I felt as if I wasn't learning things that were that practical.","A very time consuming class, but also very do-able. I would definitely choose this class over 61 because I feel like the concepts you learn in this class are more useful. OCaml is really cool. I do think that Jesse spoke a little fast and assumed that we knew more than we actually did about CS. His slides weren't that good either. But all in all, he did a pretty good job teaching this class--especially when you take into account that this is his first year teaching it.","It was a good course and taught fundamental things about computer science.","A worthwhile course to take if you are newer to programming and do not understand computer languages. A useful course if you are a developed programmer and want a more thorough background in computer languages.","As it was the instructor's first year teaching this course, things were a bit rocky. The material was interesting, it was just not always presented effectively.","This course is one that every computer scientist either must take or otherwise learn the content in. Being able to program in a functional paradigm is crucial, and is impacting how I think about solving problems in computer science.","CS51 is a big jump from CS50. You will find yourself spending countless hours trying to work through the psets. Make sure that you have a relatively light schedule to accommodate CS51.","It takes a fair amount of time, don't take it along with numerous other hard courses.","Take it. OCaml and functional programming are fun. Boring lectures and sometimes-tedious psets, but lots of learning","CS51 is a really great second semester CS class that cements a lot of the concepts you introduce in CS50. Its workload was similar to CS50, but that shouldn't discourage anyone not to take it. All in all, I enjoyed section, thought that the final project was a lot of fun to work, and there is so much support in the teaching staff."]}},"mostRecentQ":{"overall":"3.40","workload":"3.70","difficulty":"3.60","recommendation":"3.70","enrollment":"259","response rate":"72.59","QCourseOverall":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"7","2s":"22","3s":"65","4s":"63","5s":"27"},"QDifficulty":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"1","2s":"15","3s":"61","4s":"85","5s":"20"},"QWorkload":{"number":"COMPSCI 51","course_id":"1225","cat_num":"3411","1s":"0","2s":"18","3s":"67","4s":"53","5s":"43"}},"success":true}